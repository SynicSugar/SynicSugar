<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO NOT CHANGE IT.
// </auto-generated>
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0436 // Type conflicts with the imported type

using UnityEngine;
using MemoryPack;
using MemoryPack.Compression;
using System;
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Epic.OnlineServices;
using SynicSugar.RTC;
namespace SynicSugar.P2P {
    internal sealed class ConnectHub : IPacketConvert {
        //Singleton
        private static Lazy<ConnectHub> instance = new Lazy<ConnectHub>();
        public static ConnectHub Instance => instance.Value;

        private ConnectHub(){
            syncTokenSource = new CancellationTokenSource();
        }
        INetworkCore _networkCore;
        INetworkCore NetworkCore { 
            get { 
                if(_networkCore == null){
                    _networkCore = p2pConfig.Instance.GetNetworkCore();
                }
                return _networkCore;
            }
        }
        /// <summary>
        /// SyncToken is managed with the connection's valid state.
        /// </summary>
        CancellationTokenSource syncTokenSource;

        public CancellationToken GetSyncToken(){
            return syncTokenSource.Token;
        }
        //Start
        /// <summary>
        /// Start the packet receiver. Call after creating the Network Instance required for reception.<br />
        /// This cannot be called with other Receiver same time. If start the other Receiver, ConenctHub stop this Receiver automatically before start the new one.
        /// </summary>
        /// <param name="receiveTiming">The timing that packet receiver gets packet from buffer.</param>
        /// <param name="maxBatchSize">How many times during 1 FPS are received</param>
        public Result StartPacketReceiver(PacketReceiveTiming receiveTiming = PacketReceiveTiming.Update, uint maxBatchSize = 1){
        #if SYNICSUGAR_PACKETINFO
            string chs = string.Empty;
            string[] chList = Enum.GetNames(typeof(ConnectHub.CHANNELLIST));
            foreach(var l in chList){
                chs += l.ToString() + ", ";
            }
            Debug.Log($"ch info: amount {chList.Length} / {chs}");
        #endif
            return NetworkCore.StartPacketReceiver(this, receiveTiming, maxBatchSize);
        }
        
        /// <summary>
        /// To get only SynicPacket in burst FPS. Call after creating the Network Instance required for reception.<br />
        /// This cannot be called with other Receiver same time. If start the other Receiver, ConenctHub stop this Receiver automatically before start the new one.
        /// </summary>
        /// <param name="maxBatchSize">How many times during 1 FPS are received</param>
        public Result StartSynicReceiver(uint maxBatchSize = 1){
            return NetworkCore.StartSynicReceiver(this, maxBatchSize);
        }
        //Pause receiver
        /// <summary>
        /// Pause getting a packet from the buffer. To re-start, call StartPacketReceiver().<br />
        /// *Packet receiving to the buffer is continue. If the packet is over the buffer, subsequent packets are discarded.
        /// </summary>
        [Obsolete("This is old. StopPacketReceiver is new one.")] 
        public Result PausePacketReceiver(){
            return NetworkCore.StopPacketReceiver();
        }
        //Stop receiver
        /// <summary>
        /// Stop getting a packet from the buffer. To re-start, call StartPacketReceiver().<br />
        /// *Packet receiving to the buffer is continue. If the packet is over the buffer, subsequent packets are discarded.
        /// </summary>
        public Result StopPacketReceiver(){
            return NetworkCore.StopPacketReceiver();
        }

        //Pause Reciving buffer
        /// <summary>
        /// Pause receiving a packet to the receive buffer. To re-start, call RestartConnections(). <br />
        /// After call this, packets will have been discarded until connection will re-open.
        /// </summary>
        /// <param name="isForced">If True, force to stop and clear current packet queue. <br />
        /// If false, process current queue, then stop it.</param>
        public async UniTask<Result> PauseConnections(bool isForced = false, CancellationToken cancelToken = default(CancellationToken)){
            syncTokenSource.Cancel();
            return await NetworkCore.PauseConnections(isForced, cancelToken);
        }
        /// <summary>
        /// Prepare to receive packets in advance. If user sent a packet, it can also open connection to get packets without this.
        /// </summary>
        public Result RestartConnections(){
            NetworkCore.RestartConnections();
            syncTokenSource = new CancellationTokenSource();
            return StartPacketReceiver();
        }
        
        /// <summary>
        /// Stop receiver, close all connections and remove the notify events.
        /// Then, the user leave the lobby.<br />
        /// The last user closes the lobby in Backend.
        /// <param name="destroyManager">Destroy NetworkManager after exit lobby.</param>
        /// <param name="cleanupMemberCountChanged">Need to call MatchMakeManager.Instance.MatchMakingGUIEvents.LobbyMemberCountChanged(id, false) after exit lobby?</param>
        /// <param name="cancelToken">Cancel token for this task</param>
        /// </summary>
        public async UniTask<Result> ExitSession(bool destroyManager = true, bool cleanupMemberCountChanged = false, CancellationToken cancelToken = default(CancellationToken)){
            Result result = await NetworkCore.ExitSession(destroyManager, cleanupMemberCountChanged, cancelToken);
            
            if(result == Result.Success){
                syncTokenSource.Cancel();
                ClearReferenceDictionaries();
            }
            return result;
        }
        /// <summary>
        /// Stop receiver, close all connections and remove the notify events.
        /// Then, Host closes and Guest leaves the Lobby.<br />
        /// When Host closes Lobby, Guests are automatically kicked out from the Lobby.
        /// <param name="destroyManager">Destroy NetworkManager after exit lobby.</param>
        /// <param name="cleanupMemberCountChanged">Need to call MatchMakeManager.Instance.MatchMakingGUIEvents.LobbyMemberCountChanged(id, false) after exit lobby?</param>
        /// <param name="cancelToken">Cancel token for this task</param>
        /// </summary>
        public async UniTask<Result> CloseSession(bool destroyManager = true, bool cleanupMemberCountChanged = false, CancellationToken cancelToken = default(CancellationToken)){
            Result result = await NetworkCore.CloseSession(destroyManager, cleanupMemberCountChanged, cancelToken);

            if(result == Result.Success){
                syncTokenSource.Cancel();
                ClearReferenceDictionaries();
            }
            
            return result;
        }

        /// <summary>
        /// Stop receiver, close all connections and remove the notify events.
        /// Then, Host closes and Guest leaves the Lobby.<br />
        /// When Host closes Lobby, Guests are automatically kicked out from the Lobby.
        /// <param name="destroyManager">Destroy NetworkManager after exit lobby.</param>
        /// <param name="cleanupMemberCountChanged">Need to call MatchMakeManager.Instance.MatchMakingGUIEvents.LobbyMemberCountChanged(id, false) after exit lobby?</param>
        /// <param name="cancelToken">Cancel token for this task</param>
        /// </summary>
        public async UniTask<Result> DestoryOfflineLobby(bool destroyManager = true, bool cleanupMemberCountChanged = false, CancellationToken cancelToken = default(CancellationToken)){
            Result result = await NetworkCore.DestoryOfflineLobby(destroyManager, cleanupMemberCountChanged, cancelToken);

            if(result == Result.Success){
                syncTokenSource.Cancel();
                ClearReferenceDictionaries();
            }
            
            return result;
        }

        //(for elements)
        public enum CHANNELLIST{
            <#= SyncList #>
        }
        //For Synic(UserId, value)
        Dictionary<string, byte[]> synicBuffer = new Dictionary<string, byte[]>();
        Dictionary<string, SynicPacketInfomation> synicPacketInfo = new Dictionary<string, SynicPacketInfomation>();

        //For LargePacket(UserId, (ch, value))
        Dictionary<string, Dictionary<byte, byte[]>> largeBuffer = new Dictionary<string,Dictionary<byte, byte[]>>();
        Dictionary<string, Dictionary<byte, LargePacketsInfomation>> largePacketInfo = new Dictionary<string, Dictionary<byte, LargePacketsInfomation>>();

        //Ref(for class)<#= Reference #>

        //Clear ref
        private void ClearReferenceDictionaries(){ <#= ClearReference #>
            synicBuffer.Clear();
            synicPacketInfo.Clear();
            largeBuffer.Clear();
            largePacketInfo.Clear();
        }

        //Register(for class)<#= Register #>
        
        /// <summary>
        /// Get the NetworkPlayer instance registered with ConnectHub.
        /// </summary>
        /// <param name="id">UserID to get</param>
        /// <returns>T's instance</returns>
        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {<#= PlayeInstance #>
            return default(T);
        }
        
        /// <summary>
        /// Get the NetworkCommons instance registered with ConnectHub.
        /// </summary>
        /// <returns>T's instance</returns>
        public T GetInstance<T>() where T : IGetCommons {<#= CommonsInstance #>
            return default(T);
        }

        //SendPacket(for elements)
        public void ConvertFromPacket(ref byte ch, string id, ref ArraySegment<byte> payload){
            switch((CHANNELLIST)ch){<#= PacketConvert #>
                case CHANNELLIST.ObtainPing:
                    EOSp2p.SendPacket((byte)CHANNELLIST.ReturnPong, payload, UserId.GetUserId(id));
                return;
                case CHANNELLIST.ReturnPong:
                    NetworkCore.GetPong(id, payload);
                return;
                case CHANNELLIST.Synic:
                    bool restoredPacket = RestoreSynicPackets(ref ch, id, ref payload);
                    if(!restoredPacket){
    #if SYNICSUGAR_LOG 
                        Debug.LogFormat("ConvertFormPacket: Restore packet is in progress. for {0}", id);
    #endif
                        return;
                    }
                    
                    SyncedSynic(id.ToString());

                    NetworkCore.UpdateSynicStatus(id, synicPacketInfo[id].phase);

                    //Init
                    synicBuffer.Remove(id.ToString());
                    synicPacketInfo.Remove(id.ToString());

                    //Stop overwriting localuser data with host data.
                    if(p2pInfo.Instance.IsLoaclUser(id)){
                        NetworkCore.StopOverwritingLocalUserData();
                    }
                return;
            }
        }

        /// <summary>
        /// Re-Send RPC with last recorded information.<br />
        /// To send disconnected peers after some time. SynicSugar retransmit to connecting-peers.<br />
        /// To record, pass true to attribute.
        /// </summary>
        public void ResendLastRPC(){
            if(p2pInfo.Instance.LastRPCIsLargePacket){
                EOSp2p.SendLargePacketsToAll(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload).Forget();
                return;
            }
            EOSp2p.SendPacketToAll(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload).Forget();
        }
        /// <summary>
        /// Re-Send RPC to the specific target with last recorded information.<br />
        /// In order to send disconnected peers after the some time. SynicSugar has retransmission to connecting-peers for the reliability.<br />
        /// To record, pass true to attribute.
        /// </summary>
        /// <param name="target"></param>
        public void ResendLastRPCToTarget(UserId target){
            if(p2pInfo.Instance.LastRPCIsLargePacket){
                EOSp2p.SendLargePackets(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload, target).Forget();
                return;
            }
            EOSp2p.SendPacket(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload, target);
        }
        /// <summary>
        /// Re-Send TargetRPC with last recorded information.<br />
        /// In order to send disconnected peers after the some time. SynicSugar has retransmission to connecting-peers for the reliability.<br />
        /// To record, pass true to attribute.
        /// </summary>
        public void ResendLastTargetRPC(){
            if(p2pInfo.Instance.LastTargetRPCIsLargePacket){
                EOSp2p.SendLargePackets(p2pInfo.Instance.LastTargetRPCch, p2pInfo.Instance.LastTargetRPCPayload, p2pInfo.Instance.LastTargetRPCUserId).Forget();
                return;
            }
            EOSp2p.SendPacket(p2pInfo.Instance.LastTargetRPCch, p2pInfo.Instance.LastTargetRPCPayload, p2pInfo.Instance.LastTargetRPCUserId);
        }

        <# if (needSyncSynic) { #>
        
        /// <summary>
        /// Sync all Synic variables. This is very heavy because it handles multiple data and repeats compression and serialization.
        /// </summary>
        /// <param name="targetId">Target to be synced by this local user.</param>
        /// /// <param name="type">Whose data Host sends in Host's local. When set WithTarget or WithOthers, can overwrite the target's local data in Host's local data.</param>
        /// <param name="syncedPhase">Phase to be synced. If syncSinglePhase is false, sync all variables in the phase up to this point.</param>
        /// <param name="syncSinglePhase">If true, send only variables in syncedPhase.</param>
        public async void SyncSynic(UserId targetId, SynicType type, byte syncedPhase = 9, bool syncSinglePhase = false){
            //Sync local data to target local
            SynicContainer synicContainer = GenerateSynicContainer(p2pInfo.Instance.LocalUserId, syncedPhase, syncSinglePhase);

            using var selfCompressor  = new BrotliCompressor();
            MemoryPackSerializer.Serialize(selfCompressor, synicContainer);

            EOSp2p.SendSynicPackets((byte)CHANNELLIST.Synic, selfCompressor.ToArray(), targetId, p2pInfo.Instance.LocalUserId, syncedPhase, syncSinglePhase);

            if(type == SynicType.OnlySelf || !p2pInfo.Instance.IsHost()){
                return;
            }
            
            if(type == SynicType.WithOthers){
                foreach(var id in p2pInfo.Instance.DisconnectedUserIds){
                    synicContainer = GenerateSynicContainer(id, syncedPhase, syncSinglePhase);

                    using var targetCompressor  = new BrotliCompressor();
                    MemoryPackSerializer.Serialize(targetCompressor, synicContainer);

                    EOSp2p.SendSynicPackets((byte)CHANNELLIST.Synic, targetCompressor.ToArray(), targetId, id, syncedPhase, syncSinglePhase);
                    await UniTask.Yield();
                }
            }
            
            //Sync target data in local to target local
            synicContainer = GenerateSynicContainer(targetId, syncedPhase, syncSinglePhase);

            using var reconnecterCompressor  = new BrotliCompressor();
            MemoryPackSerializer.Serialize(reconnecterCompressor, synicContainer);

            EOSp2p.SendSynicPackets((byte)CHANNELLIST.Synic, reconnecterCompressor.ToArray(), targetId, targetId, syncedPhase, syncSinglePhase);
        }
        
        SynicContainer GenerateSynicContainer(UserId id, byte syncedPhase, bool syncSinglePhase){
            SynicContainer synicContainer = new SynicContainer();
            switch(syncedPhase){<#= GenerateSynicContainer #>
                default:
                goto case 9;
            }
            return synicContainer;
        }
        <# } #>
        
        //Synced 0 = index, 1 = additional packet amount
        bool RestoreLargePackets(ref byte ch, string id, ref ArraySegment<byte> payload){
            //Prep
            if(!largeBuffer.ContainsKey(id)){
                largePacketInfo.Add(id, new Dictionary<byte, LargePacketsInfomation>());
                largeBuffer.Add(id, new Dictionary<byte, byte[]>());
            }
            if(!largeBuffer[id].ContainsKey(ch)){
                largePacketInfo[id].Add(ch, new LargePacketsInfomation(){ additionalPacketsAmount = payload[1] });
                //Prep enough byte[]
                largeBuffer[id].Add(ch, new byte[(payload[1] + 1) * EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE]);
            }

            int packetIndex = payload[0];
            int offset = packetIndex * EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE;

    #if SYNICSUGAR_PACKETINFO
            Debug.Log($"RestoreLargePackets: ch {ch}({(CHANNELLIST)ch}) from {id} / packet index {payload[0]}/{payload[1]}");
    #endif
            //Remove header
            Span<byte> packetPayload = payload.Slice(2);
            largePacketInfo[id][ch].currentSize += packetPayload.Length;
            //Copy Byte from what come in
            Buffer.BlockCopy(packetPayload.ToArray(), 0, largeBuffer[id][ch], offset, packetPayload.Length);

            //Comming all?
            //We don't know real packet size. So we need + 1166.
            //This first conditon for empty packet.
            return largePacketInfo[id][ch].additionalPacketsAmount == 0 || largePacketInfo[id][ch].currentSize + EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE > largeBuffer[id][ch].Length ? true : false;
        }

        // 0-packet index, 1-additional packet amount, 2-complex data[1bit-isOnly, 4bits-phase, 3bits userType], 3-data's user index
        bool RestoreSynicPackets(ref byte ch, string id, ref ArraySegment<byte> payload){
            //Set target id
            int userDataType = (int)(payload[2] & 0x07);
            if(userDataType == 0){
                if(p2pInfo.Instance.IsHost(id) && p2pInfo.Instance.IsReconnecter){
                    id = p2pInfo.Instance.LocalUserId.ToString();
                }else{
                    return false;
                }
            }else if(userDataType == 2){
                if(p2pInfo.Instance.IsHost(id) && p2pInfo.Instance.IsReconnecter){
                    id = p2pInfo.Instance.AllUserIds[payload[3]].ToString();
                }else{
                    return false;
                }
            }

            if(!synicBuffer.ContainsKey(id)){
                synicPacketInfo.Add(id, new SynicPacketInfomation(){  basis = new (){ additionalPacketsAmount = payload[1]}, 
                                                                            phase = (byte)((payload[2] >> 3) & 0x0F), 
                                                                            isSinglePhase = (payload[2] & 0x80) != 0 });
                //Prep enough byte[]
                synicBuffer.Add(id, new byte[(payload[1] + 1) * EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE]);
            }
            int packetIndex = payload[0];
            int offset = packetIndex * EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE;

    #if SYNICSUGAR_PACKETINFO
            Debug.Log($"RestoreSynicPacket(Synic): ch {ch}({(CHANNELLIST)ch}) / Data's userID {id} / packet index {payload[0]}/{payload[1]}");
    #endif
            //Remove header
            Span<byte> packetPayload = payload.Slice(4);
            synicPacketInfo[id].basis.currentSize += packetPayload.Length;
            //Copy Byte from what come in
            Buffer.BlockCopy(packetPayload.ToArray(), 0, synicBuffer[id], offset, packetPayload.Length);
            //Comming all?
            //We don't know real packet size. So we need + 1166.
            //This first conditon for empty packet.
            return synicPacketInfo[id].basis.additionalPacketsAmount == 0 || synicPacketInfo[id].basis.currentSize + EOSp2p.MAX_LARGEPACKET_PAYLOADSIZE > synicBuffer[id].Length ? true : false;
        }

        /// <summary>
        /// Call from ConvertFormPacket.
        /// </summary>
        void SyncedSynic(string overwriterUserId){
            //Deserialize packet
            using var decompressor = new BrotliDecompressor();
            Span<byte> transmittedPaylaod = new Span<byte>(synicBuffer[overwriterUserId]);

            var decompressedBuffer = decompressor.Decompress(transmittedPaylaod.Slice(0, synicPacketInfo[overwriterUserId].basis.currentSize));
            SynicContainer container = MemoryPackSerializer.Deserialize<SynicContainer>(decompressedBuffer);
#if SYNICSUGAR_LOG
            Debug.Log($"SyncedSynic: Deserialize is Success for {overwriterUserId}");
    #endif

            //Packet data
            int phase = synicPacketInfo[overwriterUserId].phase;
            bool syncSinglePhase = synicPacketInfo[overwriterUserId].isSinglePhase;

            switch(phase){<#= SyncedInvoker #>
                default:
                goto case 9;
            }
        }
        <#= SyncedItems #>
    }
}