// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SynicSugarGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ConnecthubTemplate : ConnecthubTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\n#pragma warning disable CS0164 // This labe" +
                    "l has not been referenced\r\n#pragma warning disable CS0436 // Type conflicts with" +
                    " the imported type\r\n\r\nusing UnityEngine;\r\nusing MemoryPack;\r\nusing MemoryPack.Co" +
                    "mpression;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threa" +
                    "ding;\r\nusing Cysharp.Threading.Tasks;\r\nnamespace SynicSugar.P2P {\r\n    internal " +
                    "sealed class ConnectHub {\r\n        //Singleton\r\n        private static Lazy<Conn" +
                    "ectHub> instance = new Lazy<ConnectHub>();\r\n        public static ConnectHub Ins" +
                    "tance => instance.Value;\r\n\r\n        public ConnectHub(){\r\n        }\r\n        byt" +
                    "e ch_r;\r\n        string id_r;\r\n        ArraySegment<byte> payload_r;\r\n        //" +
                    "Start\r\n        /// <summary>\r\n        /// Start the packet receiver. Call after " +
                    "creating the Network Instance required for reception.\r\n        /// </summary>\r\n " +
                    "       // Default Relay Setting is AllowRelay. To change this, get NatType.\r\n   " +
                    "     public void StartPacketReceiver(){\r\n            if(p2pConnectorForOtherAsse" +
                    "mbly.Instance.p2pToken != null && !p2pConnectorForOtherAssembly.Instance.p2pToke" +
                    "n.IsCancellationRequested){\r\n                p2pConnectorForOtherAssembly.Instan" +
                    "ce.p2pToken.Cancel();\r\n            }\r\n\r\n            p2pConnectorForOtherAssembly" +
                    ".Instance.p2pToken = new CancellationTokenSource();\r\n\r\n            if(p2pConfig." +
                    "Instance.AutoRefreshPing){\r\n                p2pConnectorForOtherAssembly.Instanc" +
                    "e.AutoRefreshPings(p2pConnectorForOtherAssembly.Instance.p2pToken.Token).Forget(" +
                    ");\r\n            }\r\n\r\n            if(p2pConfig.Instance.getPacketFrequency == p2p" +
                    "Config.GetPacketFrequency.PerSecond3xFPS){\r\n                ReciveThreePackets()" +
                    ".Forget();\r\n                return;\r\n            }\r\n            RecivePacket().F" +
                    "orget();\r\n        }\r\n        //Pause receiver\r\n        /// <summary>\r\n        //" +
                    "/ Pause getting a packet from the buffer. To re-start, call StartPacketReceiver(" +
                    ").<br />\r\n        /// *Packet receiving to the buffer is continue. If the packet" +
                    " is over the buffer, subsequent packets are discarded.\r\n        /// </summary>\r\n" +
                    "        public void PausetPacketReceiver(){\r\n            if(p2pConnectorForOther" +
                    "Assembly.Instance.p2pToken != null && !p2pConnectorForOtherAssembly.Instance.p2p" +
                    "Token.IsCancellationRequested){\r\n                p2pConnectorForOtherAssembly.In" +
                    "stance.p2pToken.Cancel();\r\n            }\r\n        }\r\n\r\n        //Pause Reciving " +
                    "buffer\r\n        /// <summary>\r\n        /// Pause receiving a packet to the recei" +
                    "ve buffer. To re-start, call RestartConnections(). <br />\r\n        /// After cal" +
                    "l this, packets will have been discarded until connection will re-open.<br />\r\n " +
                    "       /// WARNING: This doesn\'t work as intended now. Can\'t stop receiving pack" +
                    "ets to buffer, so SynicSugar discard those packets before re-start.\r\n        ///" +
                    " </summary>\r\n        /// <param name=\"isForced\">If True, force to stop and clear" +
                    " current packet queue. <br />\r\n        /// If false, process current queue, then" +
                    " stop it.</param>\r\n        public async UniTask PauseConnections(bool isForced =" +
                    " false, CancellationTokenSource cancelToken = default(CancellationTokenSource)){" +
                    "\r\n            if(cancelToken == default(CancellationTokenSource)){\r\n            " +
                    "    cancelToken = new CancellationTokenSource();\r\n            }\r\n            awa" +
                    "it p2pConnectorForOtherAssembly.Instance.PauseConnections(isForced, cancelToken." +
                    "Token);\r\n        }\r\n        /// <summary>\r\n        /// Prepare to receive packet" +
                    "s in advance. If user sent a packet, it can also open connection to get packets " +
                    "without this.\r\n        /// </summary>\r\n        public void RestartConnections(){" +
                    "\r\n            p2pConnectorForOtherAssembly.Instance.RestartConnections();\r\n     " +
                    "       StartPacketReceiver();\r\n        }\r\n        \r\n        /// <summary>\r\n     " +
                    "   /// Stop receiver, close all connections and remove the notify events.\r\n     " +
                    "   /// Then, the user leave the lobby.<br />\r\n        /// To exit from lobby alo" +
                    "ne during a game(= not whole, only one battle). Usually use CloseSession().\r\n   " +
                    "     /// </summary>\r\n        public async UniTask<bool> ExitSession(Cancellation" +
                    "TokenSource cancelToken = default(CancellationTokenSource)){\r\n            if(can" +
                    "celToken == default(CancellationTokenSource)){\r\n                cancelToken = ne" +
                    "w CancellationTokenSource();\r\n            }\r\n            bool isSuccess = await " +
                    "p2pConnectorForOtherAssembly.Instance.ExitSession(cancelToken.Token);\r\n         " +
                    "   ClearReferenceDictionaries();\r\n            return isSuccess;\r\n        }\r\n    " +
                    "    /// <summary>\r\n        /// Stop receiver, close all connections and remove t" +
                    "he notify events.<br />\r\n        /// Then, Host closees and Guest leaves the lob" +
                    "by.\r\n        /// </summary>\r\n        public async UniTask<bool> CloseSession(Can" +
                    "cellationTokenSource cancelToken = default(CancellationTokenSource)){\r\n         " +
                    "   if(cancelToken == default(CancellationTokenSource)){\r\n                cancelT" +
                    "oken = new CancellationTokenSource();\r\n            }\r\n            bool isSuccess" +
                    " = await p2pConnectorForOtherAssembly.Instance.CloseSession(cancelToken.Token);\r" +
                    "\n            ClearReferenceDictionaries();\r\n            return isSuccess;\r\n     " +
                    "   }\r\n        async UniTask RecivePacket(){\r\n            while(!p2pConnectorForO" +
                    "therAssembly.Instance.p2pToken.IsCancellationRequested){\r\n                bool r" +
                    "ecivePacket = p2pConnectorForOtherAssembly.Instance.GetPacketFromBuffer(ref ch_r" +
                    ", ref id_r, ref payload_r);\r\n\r\n                if(recivePacket){\r\n              " +
                    "      ConnectHub.Instance.ConvertFromPacket(ref ch_r, ref id_r, ref payload_r);\r" +
                    "\n                }\r\n                await UniTask.Delay(p2pConnectorForOtherAsse" +
                    "mbly.Instance.receiverInterval);\r\n\r\n                if(p2pConnectorForOtherAssem" +
                    "bly.Instance == null || p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancell" +
                    "ationRequested){\r\n                    break;\r\n                }\r\n            }\r\n" +
                    "        }\r\n        \r\n        async UniTask ReciveThreePackets(){\r\n            wh" +
                    "ile(!p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancellationRequested){\r\n " +
                    "               //1st\r\n                bool recivePacket = p2pConnectorForOtherAs" +
                    "sembly.Instance.GetPacketFromBuffer(ref ch_r, ref id_r, ref payload_r);\r\n       " +
                    "         if(recivePacket){\r\n                    ConnectHub.Instance.ConvertFromP" +
                    "acket(ref ch_r, ref id_r, ref payload_r);\r\n                    //2nd\r\n          " +
                    "          recivePacket = p2pConnectorForOtherAssembly.Instance.GetPacketFromBuff" +
                    "er(ref ch_r, ref id_r, ref payload_r);\r\n                    if(recivePacket){\r\n " +
                    "                       ConnectHub.Instance.ConvertFromPacket(ref ch_r, ref id_r," +
                    " ref payload_r);\r\n                        //3rd\r\n                        reciveP" +
                    "acket = p2pConnectorForOtherAssembly.Instance.GetPacketFromBuffer(ref ch_r, ref " +
                    "id_r, ref payload_r);\r\n                        if(recivePacket){\r\n              " +
                    "              ConnectHub.Instance.ConvertFromPacket(ref ch_r, ref id_r, ref payl" +
                    "oad_r);\r\n                        }\r\n                    }\r\n                }\r\n\r\n" +
                    "                await UniTask.Yield(PlayerLoopTiming.Update);\r\n\r\n               " +
                    " if(p2pConnectorForOtherAssembly.Instance == null || p2pConnectorForOtherAssembl" +
                    "y.Instance.p2pToken.IsCancellationRequested){\r\n                    break;\r\n     " +
                    "           }\r\n            }\r\n        }\r\n\r\n        //(for elements)\r\n        publ" +
                    "ic enum CHANNELLIST{\r\n            ");
            
            #line 156 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncList));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        //For Synic\r\n        Dictionary<string, byte[]> buffer = new" +
                    " Dictionary<string, byte[]>();\r\n        Dictionary<string, LargePacketInfomation" +
                    "> packetInfo = new Dictionary<string, LargePacketInfomation>();\r\n\r\n        //Ref" +
                    "(for class)");
            
            #line 162 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Reference));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //Clear ref\r\n        private void ClearReferenceDictionaries(){ ");
            
            #line 165 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClearReference));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        //Register(for class)");
            
            #line 168 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Register));
            
            #line default
            #line hidden
            this.Write(@"
        
        /// <summary>
        /// Get the NetworkPlayer instance registered with ConnectHub.
        /// </summary>
        /// <param name=""id"">UserID to get</param>
        /// <returns>T's instance</returns>
        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {");
            
            #line 175 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PlayeInstance));
            
            #line default
            #line hidden
            this.Write(@"
            return default(T);
        }
        
        /// <summary>
        /// Get the NetworkCommons instance registered with ConnectHub.
        /// </summary>
        /// <returns>T's instance</returns>
        public T GetInstance<T>() where T : IGetCommons {");
            
            #line 183 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommonsInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n\r\n        //SendPacket(for elements)" +
                    "\r\n        public void ConvertFromPacket(ref byte ch, ref string id, ref ArraySeg" +
                    "ment<byte> payload){\r\n            switch((CHANNELLIST)ch){");
            
            #line 189 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PacketConvert));
            
            #line default
            #line hidden
            this.Write(@"
                case CHANNELLIST.ObtainPing:
                    EOSp2p.SendPacket((byte)CHANNELLIST.ReturnPong, payload, UserId.GetUserId(id));
                return;
                case CHANNELLIST.ReturnPong:
                    p2pConnectorForOtherAssembly.Instance.GetPong(id, payload);
                return;
                case CHANNELLIST.Synic:
                    bool restoredPacket = RestorePackets(ref ch, ref id, ref payload);
                    if(!restoredPacket){
    #if SYNICSUGAR_LOG 
                        Debug.LogFormat(""ConvertFormPacket: Restore packet is in progress. for {0}"", id);
    #endif
                        return;
                    }
                    SyncedSynic(id);

                    p2pConnectorForOtherAssembly.Instance.UpdateSyncedState(id, packetInfo[id].phase);

                    //Init
                    buffer.Remove(id);
                    packetInfo.Remove(id);

                    //Change AcceptHostsSynic flag.
                    if(p2pInfo.Instance.IsLoaclUser(id)){
                        p2pConnectorForOtherAssembly.Instance.CloseHostSynic();
                    }
                    
                return;
            }
        }

        ");
            
            #line 221 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 if (needSyncSynic) { 
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Sync all Synic variables. This is very heavy" +
                    " because it handles multiple data and repeats compression and serialization.\r\n  " +
                    "      /// </summary>\r\n        /// <param name=\"targetId\">Target to be synced by " +
                    "this local user.</param>\r\n        /// <param name=\"syncedPhase\">Phase to be sync" +
                    "ed. If syncSinglePhase is false, sync all variables in the phase up to this poin" +
                    "t.</param>\r\n        /// <param name=\"syncSinglePhase\">If true, send only variabl" +
                    "es in syncedPhase.</param>\r\n        /// <param name=\"syncTargetsData\">If true, s" +
                    "ync target\'s data in Host local. When the target AllowHostsSynic, can overwrite " +
                    "the target\'s data in that local only once.</param>\r\n        public void SyncSyni" +
                    "c(UserId targetId, byte syncedPhase = 9, bool syncSinglePhase = false, bool sync" +
                    "TargetsData = true){\r\n            //Sync local data to target local\r\n           " +
                    " SynicContainer synicContainer = GenerateSynicContainer(p2pInfo.Instance.LocalUs" +
                    "erId, syncedPhase, syncSinglePhase);\r\n\r\n            using var selfCompressor  = " +
                    "new BrotliCompressor();\r\n            MemoryPackSerializer.Serialize(selfCompress" +
                    "or, synicContainer);\r\n\r\n            EOSp2p.SendLargePacket((byte)CHANNELLIST.Syn" +
                    "ic, selfCompressor.ToArray(), targetId, syncedPhase, syncSinglePhase);\r\n\r\n      " +
                    "      if(!syncTargetsData || !p2pInfo.Instance.IsHost()){\r\n                retur" +
                    "n;\r\n            }\r\n            //Sync target data in local to target local\r\n\r\n  " +
                    "          synicContainer = GenerateSynicContainer(targetId, syncedPhase, syncSin" +
                    "glePhase);\r\n\r\n            using var targetCompressor  = new BrotliCompressor();\r" +
                    "\n            MemoryPackSerializer.Serialize(targetCompressor, synicContainer);\r\n" +
                    "\r\n            EOSp2p.SendLargePacket((byte)CHANNELLIST.Synic, targetCompressor.T" +
                    "oArray(), targetId, syncedPhase, syncSinglePhase, false);\r\n        }\r\n\r\n        " +
                    "");
            
            #line 252 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateSynicContainer));
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 253 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        //Synced 0 = index, 1 = chunk, 2 = phase, 3 = syncSinglePhase, 4 = isSe" +
                    "lf\r\n        bool RestorePackets(ref byte ch, ref string id, ref ArraySegment<byt" +
                    "e> payload){\r\n            if(payload[4] == 0){\r\n                if(p2pInfo.Insta" +
                    "nce.IsHost(id) && p2pInfo.Instance.AcceptHostSynic){\r\n                    id = p" +
                    "2pInfo.Instance.LocalUserId.ToString();\r\n                }else{\r\n               " +
                    "     return false;\r\n                }\r\n            }\r\n\r\n            if(!buffer.C" +
                    "ontainsKey(id)){\r\n                packetInfo.Add(id, new LargePacketInfomation()" +
                    "{  chunk = payload[1], \r\n                                                       " +
                    "                     phase = payload[2], \r\n                                     " +
                    "                                       syncSinglePhase = payload[3] == 1 ? true " +
                    ": false });\r\n                //Prep enough byte[]\r\n                buffer.Add(id" +
                    ", new byte[payload[1] * 1100]);\r\n            }\r\n            int packetIndex = pa" +
                    "yload[0];\r\n            int offset = packetIndex * 1100;\r\n\r\n    #if SYNICSUGAR_LO" +
                    "G\r\n            Debug.Log($\"RestorePackets: PacketInfo:: index {payload[0]} / chu" +
                    "nk {payload[1]} / phase {payload[2]} / syncSinglePhase {payload[3]}\");\r\n    #end" +
                    "if\r\n            //Remove header\r\n            Span<byte> packetPayload = payload." +
                    "Slice(5);\r\n            packetInfo[id].currentSize += packetPayload.Length;\r\n    " +
                    "        //Copy Byte from what come in\r\n            Buffer.BlockCopy(packetPayloa" +
                    "d.ToArray(), 0, buffer[id], offset, packetPayload.Length);\r\n            //Commin" +
                    "g all?\r\n            return packetInfo[id].currentSize + 1100 > buffer[id].Length" +
                    " ? true : false;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Call from Conv" +
                    "ertFormPacket.\r\n        /// </summary>\r\n        void SyncedSynic(string overwrit" +
                    "erUserId){\r\n            //Deserialize packet\r\n            using var decompressor" +
                    " = new BrotliDecompressor();\r\n            Span<byte> transmittedPaylaod = new Sp" +
                    "an<byte>(buffer[overwriterUserId]);\r\n\r\n            var decompressedBuffer = deco" +
                    "mpressor.Decompress(transmittedPaylaod.Slice(0, packetInfo[overwriterUserId].cur" +
                    "rentSize));\r\n            SynicContainer container = MemoryPackSerializer.Deseria" +
                    "lize<SynicContainer>(decompressedBuffer);\r\n#if SYNICSUGAR_LOG\r\n            Debug" +
                    ".Log($\"SyncedSynic: Deserialize is Success for {overwriterUserId}\");\r\n    #endif" +
                    "\r\n\r\n            //Packet data\r\n            int phase = packetInfo[overwriterUser" +
                    "Id].phase;\r\n            bool syncSinglePhase = packetInfo[overwriterUserId].sync" +
                    "SinglePhase;\r\n\r\n            switch(phase){");
            
            #line 305 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedInvoker));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "}\r\n        ");
            
            #line 310 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedItems));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ConnecthubTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
