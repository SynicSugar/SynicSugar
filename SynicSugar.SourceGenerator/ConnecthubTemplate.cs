// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SynicSugarGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ConnecthubTemplate : ConnecthubTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\n#pragma warning disable CS0164 // This labe" +
                    "l has not been referenced\r\n#pragma warning disable CS0436 // Type conflicts with" +
                    " the imported type\r\n\r\nusing UnityEngine;\r\nusing MemoryPack;\r\nusing MemoryPack.Co" +
                    "mpression;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threa" +
                    "ding;\r\nusing Cysharp.Threading.Tasks;\r\nusing SynicSugar.RTC;\r\nnamespace SynicSug" +
                    "ar.P2P {\r\n    internal sealed class ConnectHub {\r\n        //Singleton\r\n        p" +
                    "rivate static Lazy<ConnectHub> instance = new Lazy<ConnectHub>();\r\n        publi" +
                    "c static ConnectHub Instance => instance.Value;\r\n\r\n        public ConnectHub(){\r" +
                    "\n        }\r\n        byte ch_r;\r\n        string id_r;\r\n        ArraySegment<byte>" +
                    " payload_r;\r\n        //Start\r\n        /// <summary>\r\n        /// Start the packe" +
                    "t receiver. Call after creating the Network Instance required for reception.\r\n  " +
                    "      /// </summary>\r\n        // Default Relay Setting is AllowRelay. To change " +
                    "this, get NatType.\r\n        public void StartPacketReceiver(){\r\n            if(p" +
                    "2pConnectorForOtherAssembly.Instance.p2pToken != null && !p2pConnectorForOtherAs" +
                    "sembly.Instance.p2pToken.IsCancellationRequested){\r\n                p2pConnector" +
                    "ForOtherAssembly.Instance.p2pToken.Cancel();\r\n            }\r\n\r\n            p2pCo" +
                    "nnectorForOtherAssembly.Instance.p2pToken = new CancellationTokenSource();\r\n\r\n  " +
                    "          if(p2pConfig.Instance.AutoRefreshPing){\r\n                p2pConnectorF" +
                    "orOtherAssembly.Instance.AutoRefreshPings(p2pConnectorForOtherAssembly.Instance." +
                    "p2pToken.Token).Forget();\r\n            }\r\n\r\n            if(p2pConfig.Instance.ge" +
                    "tPacketFrequency == p2pConfig.GetPacketFrequency.PerSecondBurstFPS){\r\n          " +
                    "      ReciveMultiplePackets().Forget();\r\n            }else{\r\n                Rec" +
                    "ivePacket().Forget();\r\n            }\r\n            if(p2pConnectorForOtherAssembl" +
                    "y.Instance.IsEnableRTC){\r\n                RTCManager.Instance.ToggleReceiveingFr" +
                    "omTarget(null, true);\r\n            }\r\n        }\r\n        //Pause receiver\r\n     " +
                    "   /// <summary>\r\n        /// Pause getting a packet from the buffer. To re-star" +
                    "t, call StartPacketReceiver().<br />\r\n        /// *Packet receiving to the buffe" +
                    "r is continue. If the packet is over the buffer, subsequent packets are discarde" +
                    "d.\r\n        /// </summary>\r\n        public void PausetPacketReceiver(){\r\n       " +
                    "     if(p2pConnectorForOtherAssembly.Instance.p2pToken != null && !p2pConnectorF" +
                    "orOtherAssembly.Instance.p2pToken.IsCancellationRequested){\r\n                p2p" +
                    "ConnectorForOtherAssembly.Instance.p2pToken.Cancel();\r\n            }\r\n        }\r" +
                    "\n\r\n        //Pause Reciving buffer\r\n        /// <summary>\r\n        /// Pause rec" +
                    "eiving a packet to the receive buffer. To re-start, call RestartConnections(). <" +
                    "br />\r\n        /// After call this, packets will have been discarded until conne" +
                    "ction will re-open.<br />\r\n        /// WARNING: This doesn\'t work as intended no" +
                    "w. Can\'t stop receiving packets to buffer, so SynicSugar discard those packets b" +
                    "efore re-start.\r\n        /// </summary>\r\n        /// <param name=\"isForced\">If T" +
                    "rue, force to stop and clear current packet queue. <br />\r\n        /// If false," +
                    " process current queue, then stop it.</param>\r\n        public async UniTask Paus" +
                    "eConnections(bool isForced = false, CancellationTokenSource cancelToken = defaul" +
                    "t(CancellationTokenSource)){\r\n            if(cancelToken == default(Cancellation" +
                    "TokenSource)){\r\n                cancelToken = new CancellationTokenSource();\r\n  " +
                    "          }\r\n            await p2pConnectorForOtherAssembly.Instance.PauseConnec" +
                    "tions(isForced, cancelToken.Token);\r\n        }\r\n        /// <summary>\r\n        /" +
                    "// Prepare to receive packets in advance. If user sent a packet, it can also ope" +
                    "n connection to get packets without this.\r\n        /// </summary>\r\n        publi" +
                    "c void RestartConnections(){\r\n            p2pConnectorForOtherAssembly.Instance." +
                    "RestartConnections();\r\n            StartPacketReceiver();\r\n        }\r\n        \r\n" +
                    "        /// <summary>\r\n        /// Stop receiver, close all connections and remo" +
                    "ve the notify events.\r\n        /// Then, the user leave the lobby.<br />\r\n      " +
                    "  /// To exit from lobby alone during a game(= not whole, only one battle). Usua" +
                    "lly use CloseSession().\r\n        /// </summary>\r\n        public async UniTask<bo" +
                    "ol> ExitSession(CancellationTokenSource cancelToken = default(CancellationTokenS" +
                    "ource)){\r\n            if(cancelToken == default(CancellationTokenSource)){\r\n    " +
                    "            cancelToken = new CancellationTokenSource();\r\n            }\r\n       " +
                    "     bool isSuccess = await p2pConnectorForOtherAssembly.Instance.ExitSession(ca" +
                    "ncelToken.Token);\r\n            ClearReferenceDictionaries();\r\n            return" +
                    " isSuccess;\r\n        }\r\n        /// <summary>\r\n        /// Stop receiver, close " +
                    "all connections and remove the notify events.<br />\r\n        /// Then, Host clos" +
                    "ees and Guest leaves the lobby.\r\n        /// </summary>\r\n        public async Un" +
                    "iTask<bool> CloseSession(CancellationTokenSource cancelToken = default(Cancellat" +
                    "ionTokenSource)){\r\n            if(cancelToken == default(CancellationTokenSource" +
                    ")){\r\n                cancelToken = new CancellationTokenSource();\r\n            }" +
                    "\r\n            bool isSuccess = await p2pConnectorForOtherAssembly.Instance.Close" +
                    "Session(cancelToken.Token);\r\n            ClearReferenceDictionaries();\r\n        " +
                    "    return isSuccess;\r\n        }\r\n        async UniTask RecivePacket(){\r\n       " +
                    "     while(!p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancellationRequest" +
                    "ed){\r\n                bool recivePacket = p2pConnectorForOtherAssembly.Instance." +
                    "GetPacketFromBuffer(ref ch_r, ref id_r, ref payload_r);\r\n\r\n                if(re" +
                    "civePacket){\r\n                    ConnectHub.Instance.ConvertFromPacket(ref ch_r" +
                    ", ref id_r, ref payload_r);\r\n                }\r\n                await UniTask.De" +
                    "lay(p2pConnectorForOtherAssembly.Instance.receiverInterval);\r\n\r\n                " +
                    "if(p2pConnectorForOtherAssembly.Instance == null || p2pConnectorForOtherAssembly" +
                    ".Instance.p2pToken.IsCancellationRequested){\r\n                    break;\r\n      " +
                    "          }\r\n            }\r\n        }\r\n        \r\n        async UniTask ReciveMul" +
                    "tiplePackets(){\r\n            int count = p2pConfig.Instance.BurstReceiveBatchSiz" +
                    "e;\r\n\r\n            while(!p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancel" +
                    "lationRequested){\r\n                bool recivePacket = p2pConnectorForOtherAssem" +
                    "bly.Instance.GetPacketFromBuffer(ref ch_r, ref id_r, ref payload_r);\r\n          " +
                    "      count--;\r\n\r\n                if(recivePacket){\r\n                    Connect" +
                    "Hub.Instance.ConvertFromPacket(ref ch_r, ref id_r, ref payload_r);\r\n            " +
                    "    }\r\n\r\n                if(count == 0 || !recivePacket){\r\n                    a" +
                    "wait UniTask.Yield(PlayerLoopTiming.Update);\r\n                    \r\n            " +
                    "        if(p2pConnectorForOtherAssembly.Instance == null){\r\n                    " +
                    "    break;\r\n                    }\r\n                    count = p2pConfig.Instanc" +
                    "e.BurstReceiveBatchSize;\r\n                }\r\n            }\r\n        }\r\n\r\n       " +
                    " //(for elements)\r\n        public enum CHANNELLIST{\r\n            ");
            
            #line 156 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncList));
            
            #line default
            #line hidden
            this.Write(@"
        }
        //For Synic
        Dictionary<string, byte[]> synicBuffer = new Dictionary<string, byte[]>();
        Dictionary<string, SynicPacketInfomation> synicPacketInfo = new Dictionary<string, SynicPacketInfomation>();

        //Ref(for class)");
            
            #line 162 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Reference));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //Clear ref\r\n        private void ClearReferenceDictionaries(){ ");
            
            #line 165 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClearReference));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        //Register(for class)");
            
            #line 168 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Register));
            
            #line default
            #line hidden
            this.Write(@"
        
        /// <summary>
        /// Get the NetworkPlayer instance registered with ConnectHub.
        /// </summary>
        /// <param name=""id"">UserID to get</param>
        /// <returns>T's instance</returns>
        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {");
            
            #line 175 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PlayeInstance));
            
            #line default
            #line hidden
            this.Write(@"
            return default(T);
        }
        
        /// <summary>
        /// Get the NetworkCommons instance registered with ConnectHub.
        /// </summary>
        /// <returns>T's instance</returns>
        public T GetInstance<T>() where T : IGetCommons {");
            
            #line 183 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommonsInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n\r\n        //SendPacket(for elements)" +
                    "\r\n        public void ConvertFromPacket(ref byte ch, ref string id, ref ArraySeg" +
                    "ment<byte> payload){\r\n            switch((CHANNELLIST)ch){");
            
            #line 189 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PacketConvert));
            
            #line default
            #line hidden
            this.Write("\r\n                case CHANNELLIST.ObtainPing:\r\n                    EOSp2p.SendPa" +
                    "cket((byte)CHANNELLIST.ReturnPong, payload, UserId.GetUserId(id));\r\n            " +
                    "    return;\r\n                case CHANNELLIST.ReturnPong:\r\n                    p" +
                    "2pConnectorForOtherAssembly.Instance.GetPong(id, payload);\r\n                retu" +
                    "rn;\r\n                case CHANNELLIST.Synic:\r\n                    bool restoredP" +
                    "acket = RestorePackets(ref ch, ref id, ref payload);\r\n                    if(!re" +
                    "storedPacket){\r\n    #if SYNICSUGAR_LOG \r\n                        Debug.LogFormat" +
                    "(\"ConvertFormPacket: Restore packet is in progress. for {0}\", id);\r\n    #endif\r\n" +
                    "                        return;\r\n                    }\r\n                    Sync" +
                    "edSynic(id);\r\n\r\n                    p2pConnectorForOtherAssembly.Instance.Update" +
                    "SyncedState(id, synicPacketInfo[id].phase);\r\n\r\n                    //Init\r\n     " +
                    "               synicBuffer.Remove(id);\r\n                    synicPacketInfo.Remo" +
                    "ve(id);\r\n\r\n                    //Change AcceptHostsSynic flag.\r\n                " +
                    "    if(p2pInfo.Instance.IsLoaclUser(id)){\r\n                        p2pConnectorF" +
                    "orOtherAssembly.Instance.CloseHostSynic();\r\n                    }\r\n             " +
                    "       \r\n                return;\r\n            }\r\n        }\r\n\r\n        /// <summa" +
                    "ry>\r\n        /// Re-Send RPC with last recorded information.<br />\r\n        /// " +
                    "To send disconnected peers after some time. SynicSugar retransmit to connecting-" +
                    "peers.<br />\r\n        /// To record, pass true to attribute.\r\n        /// </summ" +
                    "ary>\r\n        public void ResendLastRPC(){\r\n            EOSp2p.SendPacketToAll(p" +
                    "2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload).Forget();\r\n        }" +
                    "\r\n        /// <summary>\r\n        /// Re-Send RPC to the specific target with las" +
                    "t recorded information.<br />\r\n        /// In order to send disconnected peers a" +
                    "fter the some time. SynicSugar has retransmission to connecting-peers for the re" +
                    "liability.<br />\r\n        /// To record, pass true to attribute.\r\n        /// </" +
                    "summary>\r\n        /// <param name=\"target\"></param>\r\n        public void ResendL" +
                    "astRPCToTarget(UserId target){\r\n            EOSp2p.SendPacket(p2pInfo.Instance.L" +
                    "astRPCch, p2pInfo.Instance.LastRPCPayload, target);\r\n        }\r\n        /// <sum" +
                    "mary>\r\n        /// Re-Send TargetRPC with last recorded information.<br />\r\n    " +
                    "    /// In order to send disconnected peers after the some time. SynicSugar has " +
                    "retransmission to connecting-peers for the reliability.<br />\r\n        /// To re" +
                    "cord, pass true to attribute.\r\n        /// </summary>\r\n        public void Resen" +
                    "dLastTargetRPC(){\r\n            EOSp2p.SendPacket(p2pInfo.Instance.LastTargetRPCc" +
                    "h, p2pInfo.Instance.LastTargetRPCPayload, p2pInfo.Instance.LastTargetRPCUserId);" +
                    "\r\n        }\r\n\r\n        ");
            
            #line 247 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 if (needSyncSynic) { 
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Sync all Synic variables. This is very heavy" +
                    " because it handles multiple data and repeats compression and serialization.\r\n  " +
                    "      /// </summary>\r\n        /// <param name=\"targetId\">Target to be synced by " +
                    "this local user.</param>\r\n        /// <param name=\"syncedPhase\">Phase to be sync" +
                    "ed. If syncSinglePhase is false, sync all variables in the phase up to this poin" +
                    "t.</param>\r\n        /// <param name=\"syncSinglePhase\">If true, send only variabl" +
                    "es in syncedPhase.</param>\r\n        /// <param name=\"syncTargetsData\">If true, s" +
                    "ync target\'s data in Host local. When the target AllowHostsSynic, can overwrite " +
                    "the target\'s data in that local only once.</param>\r\n        public void SyncSyni" +
                    "c(UserId targetId, byte syncedPhase = 9, bool syncSinglePhase = false, bool sync" +
                    "TargetsData = true){\r\n            //Sync local data to target local\r\n           " +
                    " SynicContainer synicContainer = GenerateSynicContainer(p2pInfo.Instance.LocalUs" +
                    "erId, syncedPhase, syncSinglePhase);\r\n\r\n            using var selfCompressor  = " +
                    "new BrotliCompressor();\r\n            MemoryPackSerializer.Serialize(selfCompress" +
                    "or, synicContainer);\r\n\r\n            EOSp2p.SendLargePacket((byte)CHANNELLIST.Syn" +
                    "ic, selfCompressor.ToArray(), targetId, syncedPhase, syncSinglePhase);\r\n\r\n      " +
                    "      if(!syncTargetsData || !p2pInfo.Instance.IsHost()){\r\n                retur" +
                    "n;\r\n            }\r\n            //Sync target data in local to target local\r\n\r\n  " +
                    "          synicContainer = GenerateSynicContainer(targetId, syncedPhase, syncSin" +
                    "glePhase);\r\n\r\n            using var targetCompressor  = new BrotliCompressor();\r" +
                    "\n            MemoryPackSerializer.Serialize(targetCompressor, synicContainer);\r\n" +
                    "\r\n            EOSp2p.SendLargePacket((byte)CHANNELLIST.Synic, targetCompressor.T" +
                    "oArray(), targetId, syncedPhase, syncSinglePhase, false);\r\n        }\r\n\r\n        " +
                    "");
            
            #line 278 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateSynicContainer));
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 279 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        //Synced 0 = index, 1 = chunk, 2 = phase, 3 = syncSinglePhase, 4 = isSe" +
                    "lf\r\n        bool RestorePackets(ref byte ch, ref string id, ref ArraySegment<byt" +
                    "e> payload){\r\n            if(payload[4] == 0){\r\n                if(p2pInfo.Insta" +
                    "nce.IsHost(id) && p2pInfo.Instance.AcceptHostSynic){\r\n                    id = p" +
                    "2pInfo.Instance.LocalUserId.ToString();\r\n                }else{\r\n               " +
                    "     return false;\r\n                }\r\n            }\r\n\r\n            if(!synicBuf" +
                    "fer.ContainsKey(id)){\r\n                synicPacketInfo.Add(id, new SynicPacketIn" +
                    "fomation(){  basis = new (){ chunk = payload[1]}, \r\n                            " +
                    "                                                phase = payload[2], \r\n          " +
                    "                                                                  syncSinglePhas" +
                    "e = payload[3] == 1 ? true : false });\r\n                //Prep enough byte[]\r\n  " +
                    "              synicBuffer.Add(id, new byte[payload[1] * 1100]);\r\n            }\r\n" +
                    "            int packetIndex = payload[0];\r\n            int offset = packetIndex " +
                    "* 1100;\r\n\r\n    #if SYNICSUGAR_LOG\r\n            Debug.Log($\"RestorePackets: Packe" +
                    "tInfo:: index {payload[0]} / chunk {payload[1]} / phase {payload[2]} / syncSingl" +
                    "ePhase {payload[3]}\");\r\n    #endif\r\n            //Remove header\r\n            Spa" +
                    "n<byte> packetPayload = payload.Slice(5);\r\n            synicPacketInfo[id].basis" +
                    ".currentSize += packetPayload.Length;\r\n            //Copy Byte from what come in" +
                    "\r\n            Buffer.BlockCopy(packetPayload.ToArray(), 0, synicBuffer[id], offs" +
                    "et, packetPayload.Length);\r\n            //Comming all?\r\n            return synic" +
                    "PacketInfo[id].basis.currentSize + 1100 > synicBuffer[id].Length ? true : false;" +
                    "\r\n        }\r\n\r\n        /// <summary>\r\n        /// Call from ConvertFormPacket.\r\n" +
                    "        /// </summary>\r\n        void SyncedSynic(string overwriterUserId){\r\n    " +
                    "        //Deserialize packet\r\n            using var decompressor = new BrotliDec" +
                    "ompressor();\r\n            Span<byte> transmittedPaylaod = new Span<byte>(synicBu" +
                    "ffer[overwriterUserId]);\r\n\r\n            var decompressedBuffer = decompressor.De" +
                    "compress(transmittedPaylaod.Slice(0, synicPacketInfo[overwriterUserId].basis.cur" +
                    "rentSize));\r\n            SynicContainer container = MemoryPackSerializer.Deseria" +
                    "lize<SynicContainer>(decompressedBuffer);\r\n#if SYNICSUGAR_LOG\r\n            Debug" +
                    ".Log($\"SyncedSynic: Deserialize is Success for {overwriterUserId}\");\r\n    #endif" +
                    "\r\n\r\n            //Packet data\r\n            int phase = synicPacketInfo[overwrite" +
                    "rUserId].phase;\r\n            bool syncSinglePhase = synicPacketInfo[overwriterUs" +
                    "erId].syncSinglePhase;\r\n\r\n            switch(phase){");
            
            #line 331 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedInvoker));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "}\r\n        ");
            
            #line 336 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedItems));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ConnecthubTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
