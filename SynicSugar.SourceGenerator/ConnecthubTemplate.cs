// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SynicSugarGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ConnecthubTemplate : ConnecthubTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\n#pragma warning disable CS0164 // This labe" +
                    "l has not been referenced\r\n#pragma warning disable CS0436 // Type conflicts with" +
                    " the imported type\r\n\r\nusing UnityEngine;\r\nusing MemoryPack;\r\nusing MemoryPack.Co" +
                    "mpression;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threa" +
                    "ding;\r\nusing Cysharp.Threading.Tasks;\r\nusing SynicSugar.RTC;\r\nnamespace SynicSug" +
                    "ar.P2P {\r\n    internal sealed class ConnectHub {\r\n        //Singleton\r\n        p" +
                    "rivate static Lazy<ConnectHub> instance = new Lazy<ConnectHub>();\r\n        publi" +
                    "c static ConnectHub Instance => instance.Value;\r\n\r\n        public ConnectHub(){}" +
                    "\r\n        byte ch_r;\r\n        string id_r;\r\n        ArraySegment<byte> payload_r" +
                    ";\r\n        //Start\r\n        /// <summary>\r\n        /// Start the packet receiver" +
                    ". Call after creating the Network Instance required for reception.<br />\r\n      " +
                    "  /// This cannot be called with other Receiver same time. If start the other Re" +
                    "ceiver, ConenctHub stop this Receiver automatically before start the new one.\r\n " +
                    "       /// </summary>\r\n        // Default Relay Setting is AllowRelay. To change" +
                    " this, get NatType.\r\n        public void StartPacketReceiver(){\r\n            if(" +
                    "p2pConnectorForOtherAssembly.Instance.p2pToken != null && !p2pConnectorForOtherA" +
                    "ssembly.Instance.p2pToken.IsCancellationRequested){\r\n                p2pConnecto" +
                    "rForOtherAssembly.Instance.p2pToken.Cancel();\r\n            }\r\n\r\n            p2pC" +
                    "onnectorForOtherAssembly.Instance.p2pToken = new CancellationTokenSource();\r\n\r\n " +
                    "           if(p2pConfig.Instance.AutoRefreshPing){\r\n                p2pConnector" +
                    "ForOtherAssembly.Instance.AutoRefreshPings(p2pConnectorForOtherAssembly.Instance" +
                    ".p2pToken.Token).Forget();\r\n            }\r\n\r\n            if(p2pConfig.Instance.g" +
                    "etPacketFrequency == p2pConfig.GetPacketFrequency.PerSecondBurstFPS){\r\n         " +
                    "       ReciveMultiplePackets(p2pConnectorForOtherAssembly.Instance.p2pToken.Toke" +
                    "n).Forget();\r\n            }else{\r\n                RecivePacket(p2pConnectorForOt" +
                    "herAssembly.Instance.p2pToken.Token).Forget();\r\n            }\r\n            if(p2" +
                    "pConnectorForOtherAssembly.Instance.IsEnableRTC){\r\n                RTCManager.In" +
                    "stance.ToggleReceiveingFromTarget(null, true);\r\n            }\r\n        }\r\n      " +
                    "  \r\n        /// <summary>\r\n        /// To get only SynicPacket in burst FPS. Cal" +
                    "l after creating the Network Instance required for reception.<br />\r\n        ///" +
                    " This cannot be called with other Receiver same time. If start the other Receive" +
                    "r, ConenctHub stop this Receiver automatically before start the new one.\r\n      " +
                    "  /// </summary>\r\n        public void StartSynicReceiver(){\r\n            if(p2pC" +
                    "onnectorForOtherAssembly.Instance.p2pToken != null && !p2pConnectorForOtherAssem" +
                    "bly.Instance.p2pToken.IsCancellationRequested){\r\n                p2pConnectorFor" +
                    "OtherAssembly.Instance.p2pToken.Cancel();\r\n            }\r\n\r\n            p2pConne" +
                    "ctorForOtherAssembly.Instance.p2pToken = new CancellationTokenSource();\r\n\r\n     " +
                    "       ReciveSynicPackets(p2pConnectorForOtherAssembly.Instance.p2pToken.Token)." +
                    "Forget();\r\n        }\r\n        //Pause receiver\r\n        /// <summary>\r\n        /" +
                    "// Pause getting a packet from the buffer. To re-start, call StartPacketReceiver" +
                    "().<br />\r\n        /// *Packet receiving to the buffer is continue. If the packe" +
                    "t is over the buffer, subsequent packets are discarded.\r\n        /// </summary>\r" +
                    "\n        public void PausetPacketReceiver(){\r\n            if(p2pConnectorForOthe" +
                    "rAssembly.Instance.p2pToken != null && !p2pConnectorForOtherAssembly.Instance.p2" +
                    "pToken.IsCancellationRequested){\r\n                p2pConnectorForOtherAssembly.I" +
                    "nstance.p2pToken.Cancel();\r\n            }\r\n        }\r\n\r\n        //Pause Reciving" +
                    " buffer\r\n        /// <summary>\r\n        /// Pause receiving a packet to the rece" +
                    "ive buffer. To re-start, call RestartConnections(). <br />\r\n        /// After ca" +
                    "ll this, packets will have been discarded until connection will re-open.<br />\r\n" +
                    "        /// WARNING: This doesn\'t work as intended now. Can\'t stop receiving pac" +
                    "kets to buffer, so SynicSugar discard those packets before re-start.\r\n        //" +
                    "/ </summary>\r\n        /// <param name=\"isForced\">If True, force to stop and clea" +
                    "r current packet queue. <br />\r\n        /// If false, process current queue, the" +
                    "n stop it.</param>\r\n        public async UniTask PauseConnections(bool isForced " +
                    "= false, CancellationTokenSource cancelToken = default(CancellationTokenSource))" +
                    "{\r\n            if(cancelToken == default(CancellationTokenSource)){\r\n           " +
                    "     cancelToken = new CancellationTokenSource();\r\n            }\r\n            aw" +
                    "ait p2pConnectorForOtherAssembly.Instance.PauseConnections(isForced, cancelToken" +
                    ".Token);\r\n        }\r\n        /// <summary>\r\n        /// Prepare to receive packe" +
                    "ts in advance. If user sent a packet, it can also open connection to get packets" +
                    " without this.\r\n        /// </summary>\r\n        public void RestartConnections()" +
                    "{\r\n            p2pConnectorForOtherAssembly.Instance.RestartConnections();\r\n    " +
                    "        StartPacketReceiver();\r\n        }\r\n        \r\n        /// <summary>\r\n    " +
                    "    /// Stop receiver, close all connections and remove the notify events.\r\n    " +
                    "    /// Then, the user leave the lobby.<br />\r\n        /// To exit from lobby al" +
                    "one during a game(= not whole, only one battle). Usually use CloseSession().\r\n  " +
                    "      /// </summary>\r\n        public async UniTask<bool> ExitSession(Cancellatio" +
                    "nTokenSource cancelToken = default(CancellationTokenSource)){\r\n            if(ca" +
                    "ncelToken == default(CancellationTokenSource)){\r\n                cancelToken = n" +
                    "ew CancellationTokenSource();\r\n            }\r\n            bool isSuccess = await" +
                    " p2pConnectorForOtherAssembly.Instance.ExitSession(cancelToken.Token);\r\n        " +
                    "    ClearReferenceDictionaries();\r\n            return isSuccess;\r\n        }\r\n   " +
                    "     /// <summary>\r\n        /// Stop receiver, close all connections and remove " +
                    "the notify events.<br />\r\n        /// Then, Host closees and Guest leaves the lo" +
                    "bby.\r\n        /// </summary>\r\n        public async UniTask<bool> CloseSession(Ca" +
                    "ncellationTokenSource cancelToken = default(CancellationTokenSource)){\r\n        " +
                    "    if(cancelToken == default(CancellationTokenSource)){\r\n                cancel" +
                    "Token = new CancellationTokenSource();\r\n            }\r\n            bool isSucces" +
                    "s = await p2pConnectorForOtherAssembly.Instance.CloseSession(cancelToken.Token);" +
                    "\r\n            ClearReferenceDictionaries();\r\n            return isSuccess;\r\n    " +
                    "    }\r\n\r\n\r\n        async UniTask RecivePacket(CancellationToken token){\r\n       " +
                    "     while(!token.IsCancellationRequested){\r\n                bool recivePacket =" +
                    " p2pConnectorForOtherAssembly.Instance.GetPacketFromBuffer(ref ch_r, ref id_r, r" +
                    "ef payload_r);\r\n\r\n                if(recivePacket){\r\n                    Convert" +
                    "FromPacket(ref ch_r, ref id_r, ref payload_r);\r\n                }\r\n             " +
                    "   await UniTask.Delay(p2pConnectorForOtherAssembly.Instance.receiverInterval, c" +
                    "ancellationToken: token);\r\n\r\n                if(p2pConnectorForOtherAssembly.Ins" +
                    "tance == null){\r\n                    break;\r\n                }\r\n            }\r\n " +
                    "       }\r\n        async UniTask ReciveMultiplePackets(CancellationToken token){\r" +
                    "\n            int count = p2pConfig.Instance.BurstReceiveBatchSize;\r\n\r\n          " +
                    "  while(!token.IsCancellationRequested){\r\n                bool recivePacket = p2" +
                    "pConnectorForOtherAssembly.Instance.GetPacketFromBuffer(ref ch_r, ref id_r, ref " +
                    "payload_r);\r\n                count--;\r\n\r\n                if(recivePacket){\r\n    " +
                    "                ConvertFromPacket(ref ch_r, ref id_r, ref payload_r);\r\n         " +
                    "       }\r\n\r\n                if(count == 0 || !recivePacket){\r\n                  " +
                    "  await UniTask.Yield(PlayerLoopTiming.Update, cancellationToken : token);\r\n    " +
                    "                \r\n                    if(p2pConnectorForOtherAssembly.Instance =" +
                    "= null){\r\n                        break;\r\n                    }\r\n               " +
                    "     count = p2pConfig.Instance.BurstReceiveBatchSize;\r\n                }\r\n     " +
                    "       }\r\n        }\r\n        async UniTask ReciveSynicPackets(CancellationToken " +
                    "token){\r\n            int count = p2pConfig.Instance.SynicReceiverBatchSize;\r\n\r\n " +
                    "           while(!token.IsCancellationRequested){\r\n                bool recivePa" +
                    "cket = p2pConnectorForOtherAssembly.Instance.GetSynicPacketFromBuffer(ref ch_r, " +
                    "ref id_r, ref payload_r);\r\n                count--;\r\n\r\n                if(recive" +
                    "Packet){\r\n                    ConvertFromPacket(ref ch_r, ref id_r, ref payload_" +
                    "r);\r\n                }\r\n\r\n                if(count == 0 || !recivePacket){\r\n    " +
                    "                await UniTask.Yield(PlayerLoopTiming.Update, cancellationToken :" +
                    " token);\r\n                    \r\n                    if(p2pConnectorForOtherAssem" +
                    "bly.Instance == null){\r\n                        break;\r\n                    }\r\n " +
                    "                   count = p2pConfig.Instance.SynicReceiverBatchSize;\r\n         " +
                    "       }\r\n            }\r\n        }\r\n\r\n        //(for elements)\r\n        public e" +
                    "num CHANNELLIST{\r\n            ");
            
            #line 192 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncList));
            
            #line default
            #line hidden
            this.Write(@"
        }
        //For Synic(UserId, value)
        Dictionary<string, byte[]> synicBuffer = new Dictionary<string, byte[]>();
        Dictionary<string, SynicPacketInfomation> synicPacketInfo = new Dictionary<string, SynicPacketInfomation>();

        //For LargePacket(UserId, (ch, value))
        Dictionary<string, Dictionary<byte, byte[]>> largeBuffer = new Dictionary<string,Dictionary<byte, byte[]>>();
        Dictionary<string, Dictionary<byte, LargePacketsInfomation>> largePacketInfo = new Dictionary<string, Dictionary<byte, LargePacketsInfomation>>();

        //Ref(for class)");
            
            #line 202 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Reference));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //Clear ref\r\n        private void ClearReferenceDictionaries(){ ");
            
            #line 205 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClearReference));
            
            #line default
            #line hidden
            this.Write("\r\n            synicBuffer.Clear();\r\n            synicPacketInfo.Clear();\r\n       " +
                    "     largeBuffer.Clear();\r\n            largePacketInfo.Clear();\r\n        }\r\n\r\n  " +
                    "      //Register(for class)");
            
            #line 212 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Register));
            
            #line default
            #line hidden
            this.Write(@"
        
        /// <summary>
        /// Get the NetworkPlayer instance registered with ConnectHub.
        /// </summary>
        /// <param name=""id"">UserID to get</param>
        /// <returns>T's instance</returns>
        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {");
            
            #line 219 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PlayeInstance));
            
            #line default
            #line hidden
            this.Write(@"
            return default(T);
        }
        
        /// <summary>
        /// Get the NetworkCommons instance registered with ConnectHub.
        /// </summary>
        /// <returns>T's instance</returns>
        public T GetInstance<T>() where T : IGetCommons {");
            
            #line 227 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommonsInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n\r\n        //SendPacket(for elements)" +
                    "\r\n        public void ConvertFromPacket(ref byte ch, ref string id, ref ArraySeg" +
                    "ment<byte> payload){\r\n            switch((CHANNELLIST)ch){");
            
            #line 233 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PacketConvert));
            
            #line default
            #line hidden
            this.Write("\r\n                case CHANNELLIST.ObtainPing:\r\n                    EOSp2p.SendPa" +
                    "cket((byte)CHANNELLIST.ReturnPong, payload, UserId.GetUserId(id));\r\n            " +
                    "    return;\r\n                case CHANNELLIST.ReturnPong:\r\n                    p" +
                    "2pConnectorForOtherAssembly.Instance.GetPong(id, payload);\r\n                retu" +
                    "rn;\r\n                case CHANNELLIST.Synic:\r\n                    bool restoredP" +
                    "acket = RestoreSynicPackets(ref ch, ref id, ref payload);\r\n                    i" +
                    "f(!restoredPacket){\r\n    #if SYNICSUGAR_LOG \r\n                        Debug.LogF" +
                    "ormat(\"ConvertFormPacket: Restore packet is in progress. for {0}\", id);\r\n    #en" +
                    "dif\r\n                        return;\r\n                    }\r\n                   " +
                    " SyncedSynic(id);\r\n\r\n                    p2pConnectorForOtherAssembly.Instance.U" +
                    "pdateSyncedState(id, synicPacketInfo[id].phase);\r\n\r\n                    //Init\r\n" +
                    "                    synicBuffer.Remove(id);\r\n                    synicPacketInfo" +
                    ".Remove(id);\r\n\r\n                    //Change AcceptHostsSynic flag.\r\n           " +
                    "         if(p2pInfo.Instance.IsLoaclUser(id)){\r\n                        p2pConne" +
                    "ctorForOtherAssembly.Instance.CloseHostSynic();\r\n                    }\r\n        " +
                    "            \r\n                return;\r\n            }\r\n        }\r\n\r\n        /// <" +
                    "summary>\r\n        /// Re-Send RPC with last recorded information.<br />\r\n       " +
                    " /// To send disconnected peers after some time. SynicSugar retransmit to connec" +
                    "ting-peers.<br />\r\n        /// To record, pass true to attribute.\r\n        /// <" +
                    "/summary>\r\n        public void ResendLastRPC(){\r\n            if(p2pInfo.Instance" +
                    ".LastRPCIsLargePacket){\r\n                EOSp2p.SendLargePacketsToAll(p2pInfo.In" +
                    "stance.LastRPCch, p2pInfo.Instance.LastRPCPayload).Forget();\r\n                re" +
                    "turn;\r\n            }\r\n            EOSp2p.SendPacketToAll(p2pInfo.Instance.LastRP" +
                    "Cch, p2pInfo.Instance.LastRPCPayload).Forget();\r\n        }\r\n        /// <summary" +
                    ">\r\n        /// Re-Send RPC to the specific target with last recorded information" +
                    ".<br />\r\n        /// In order to send disconnected peers after the some time. Sy" +
                    "nicSugar has retransmission to connecting-peers for the reliability.<br />\r\n    " +
                    "    /// To record, pass true to attribute.\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"target\"></param>\r\n        public void ResendLastRPCToTarget(UserId " +
                    "target){\r\n            if(p2pInfo.Instance.LastRPCIsLargePacket){\r\n              " +
                    "  EOSp2p.SendLargePackets(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPa" +
                    "yload, target).Forget();\r\n                return;\r\n            }\r\n            EO" +
                    "Sp2p.SendPacket(p2pInfo.Instance.LastRPCch, p2pInfo.Instance.LastRPCPayload, tar" +
                    "get);\r\n        }\r\n        /// <summary>\r\n        /// Re-Send TargetRPC with last" +
                    " recorded information.<br />\r\n        /// In order to send disconnected peers af" +
                    "ter the some time. SynicSugar has retransmission to connecting-peers for the rel" +
                    "iability.<br />\r\n        /// To record, pass true to attribute.\r\n        /// </s" +
                    "ummary>\r\n        public void ResendLastTargetRPC(){\r\n            if(p2pInfo.Inst" +
                    "ance.LastTargetRPCIsLargePacket){\r\n                EOSp2p.SendLargePackets(p2pIn" +
                    "fo.Instance.LastTargetRPCch, p2pInfo.Instance.LastTargetRPCPayload, p2pInfo.Inst" +
                    "ance.LastTargetRPCUserId).Forget();\r\n                return;\r\n            }\r\n   " +
                    "         EOSp2p.SendPacket(p2pInfo.Instance.LastTargetRPCch, p2pInfo.Instance.La" +
                    "stTargetRPCPayload, p2pInfo.Instance.LastTargetRPCUserId);\r\n        }\r\n\r\n       " +
                    " ");
            
            #line 303 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 if (needSyncSynic) { 
            
            #line default
            #line hidden
            this.Write("        \r\n        /// <summary>\r\n        /// Sync all Synic variables. This is ve" +
                    "ry heavy because it handles multiple data and repeats compression and serializat" +
                    "ion.\r\n        /// </summary>\r\n        /// <param name=\"targetId\">Target to be sy" +
                    "nced by this local user.</param>\r\n        /// /// <param name=\"type\">Whose data " +
                    "Host sends in Host\'s local. When set WithTarget or WithOthers, can overwrite the" +
                    " target\'s local data in Host\'s local data.</param>\r\n        /// <param name=\"syn" +
                    "cedPhase\">Phase to be synced. If syncSinglePhase is false, sync all variables in" +
                    " the phase up to this point.</param>\r\n        /// <param name=\"syncSinglePhase\">" +
                    "If true, send only variables in syncedPhase.</param>\r\n        public async void " +
                    "SyncSynic(UserId targetId, SynicType type, byte syncedPhase = 9, bool syncSingle" +
                    "Phase = false){\r\n            //Sync local data to target local\r\n            Syni" +
                    "cContainer synicContainer = GenerateSynicContainer(p2pInfo.Instance.LocalUserId," +
                    " syncedPhase, syncSinglePhase);\r\n\r\n            using var selfCompressor  = new B" +
                    "rotliCompressor();\r\n            MemoryPackSerializer.Serialize(selfCompressor, s" +
                    "ynicContainer);\r\n\r\n            EOSp2p.SendSynicPackets((byte)CHANNELLIST.Synic, " +
                    "selfCompressor.ToArray(), targetId, p2pInfo.Instance.LocalUserId, syncedPhase, s" +
                    "yncSinglePhase);\r\n\r\n            if(type == SynicType.OnlySelf || !p2pInfo.Instan" +
                    "ce.IsHost()){\r\n                return;\r\n            }\r\n            if(type == Sy" +
                    "nicType.WithOthers){\r\n                foreach(var id in p2pInfo.Instance.Disconn" +
                    "ectedUserIds){\r\n                    synicContainer = GenerateSynicContainer(id, " +
                    "syncedPhase, syncSinglePhase);\r\n\r\n                    using var targetCompressor" +
                    "  = new BrotliCompressor();\r\n                    MemoryPackSerializer.Serialize(" +
                    "targetCompressor, synicContainer);\r\n\r\n                    EOSp2p.SendSynicPacket" +
                    "s((byte)CHANNELLIST.Synic, targetCompressor.ToArray(), targetId, id, syncedPhase" +
                    ", syncSinglePhase);\r\n                    \r\n                    await UniTask.Yie" +
                    "ld();\r\n                }\r\n            }\r\n            \r\n            //Sync target" +
                    " data in local to target local\r\n            synicContainer = GenerateSynicContai" +
                    "ner(targetId, syncedPhase, syncSinglePhase);\r\n\r\n            using var reconnecte" +
                    "rCompressor  = new BrotliCompressor();\r\n            MemoryPackSerializer.Seriali" +
                    "ze(reconnecterCompressor, synicContainer);\r\n\r\n            EOSp2p.SendSynicPacket" +
                    "s((byte)CHANNELLIST.Synic, reconnecterCompressor.ToArray(), targetId, targetId, " +
                    "syncedPhase, syncSinglePhase);\r\n        }\r\n        \r\n        SynicContainer Gene" +
                    "rateSynicContainer(UserId id, byte syncedPhase, bool syncSinglePhase){\r\n        " +
                    "    SynicContainer synicContainer = new SynicContainer();\r\n            switch(sy" +
                    "ncedPhase){");
            
            #line 348 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateSynicContainer));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "    return synicContainer;\r\n        }\r\n        \r\n        #region Obsolete\r\n     " +
                    "   [Obsolete(\"This is old. SyncSynic(UserId targetId, SynicType type, byte synce" +
                    "dPhase = 9, bool syncSinglePhase = false) is new one.\")]\r\n        /// <summary>\r" +
                    "\n        /// Sync all Synic variables. This is very heavy because it handles mul" +
                    "tiple data and repeats compression and serialization.\r\n        /// </summary>\r\n " +
                    "       /// <param name=\"targetId\">Target to be synced by this local user.</param" +
                    ">\r\n        /// <param name=\"syncedPhase\">Phase to be synced. If syncSinglePhase " +
                    "is false, sync all variables in the phase up to this point.</param>\r\n        ///" +
                    " <param name=\"syncSinglePhase\">If true, send only variables in syncedPhase.</par" +
                    "am>\r\n        /// <param name=\"syncTargetsData\">If true, sync target\'s data in Ho" +
                    "st local. When the target AllowHostsSynic, can overwrite the target\'s data in th" +
                    "at local only once.</param>\r\n        public void SyncSynic(UserId targetId, byte" +
                    " syncedPhase = 9, bool syncSinglePhase = false, bool syncTargetsData = true){\r\n " +
                    "           //Sync local data to target local\r\n            SynicContainer synicCo" +
                    "ntainer = GenerateSynicContainer(p2pInfo.Instance.LocalUserId, syncedPhase, sync" +
                    "SinglePhase);\r\n\r\n            using var selfCompressor  = new BrotliCompressor();" +
                    "\r\n            MemoryPackSerializer.Serialize(selfCompressor, synicContainer);\r\n\r" +
                    "\n            EOSp2p.SendSynicPackets((byte)CHANNELLIST.Synic, selfCompressor.ToA" +
                    "rray(), targetId, syncedPhase, syncSinglePhase);\r\n\r\n            if(!syncTargetsD" +
                    "ata || !p2pInfo.Instance.IsHost()){\r\n                return;\r\n            }\r\n   " +
                    "         //Sync target data in local to target local\r\n\r\n            synicContain" +
                    "er = GenerateSynicContainer(targetId, syncedPhase, syncSinglePhase);\r\n\r\n        " +
                    "    using var targetCompressor  = new BrotliCompressor();\r\n            MemoryPac" +
                    "kSerializer.Serialize(targetCompressor, synicContainer);\r\n\r\n            EOSp2p.S" +
                    "endSynicPackets((byte)CHANNELLIST.Synic, targetCompressor.ToArray(), targetId, s" +
                    "yncedPhase, syncSinglePhase, false);\r\n        }\r\n        #endregion\r\n        ");
            
            #line 386 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        \r\n        //Synced 0 = index, 1 = chunk\r\n        bool RestoreLargePackets" +
                    "(ref byte ch, ref string id, ref ArraySegment<byte> payload){\r\n            //Pre" +
                    "p\r\n            if(!largeBuffer.ContainsKey(id)){\r\n                largePacketInf" +
                    "o.Add(id, new Dictionary<byte, LargePacketsInfomation>());\r\n                larg" +
                    "eBuffer.Add(id, new Dictionary<byte, byte[]>());\r\n            }\r\n            if(" +
                    "!largeBuffer[id].ContainsKey(ch)){\r\n                largePacketInfo[id].Add(ch, " +
                    "new LargePacketsInfomation(){ chunk = payload[1] });\r\n                //Prep eno" +
                    "ugh byte[]\r\n                largeBuffer[id].Add(ch, new byte[payload[1] * 1160])" +
                    ";\r\n            }\r\n\r\n            int packetIndex = payload[0];\r\n            int o" +
                    "ffset = packetIndex * 1160;\r\n\r\n    #if SYNICSUGAR_LOG\r\n            Debug.Log($\"R" +
                    "estoreLargePackets: PacketInfo:: ch {ch} / index {payload[0]} / chunk {payload[1" +
                    "]}\");\r\n    #endif\r\n            //Remove header\r\n            Span<byte> packetPay" +
                    "load = payload.Slice(2);\r\n            largePacketInfo[id][ch].currentSize += pac" +
                    "ketPayload.Length;\r\n            //Copy Byte from what come in\r\n            Buffe" +
                    "r.BlockCopy(packetPayload.ToArray(), 0, largeBuffer[id][ch], offset, packetPaylo" +
                    "ad.Length);\r\n\r\n            //Comming all?\r\n            return largePacketInfo[id" +
                    "][ch].currentSize + 1160 > largeBuffer[id][ch].Length ? true : false;\r\n        }" +
                    "\r\n\r\n        //Synced 0 = index, 1 = chunk, 2 = phase, 3 = syncSinglePhase, 4 = w" +
                    "hose data?(0: localUser, 1: sender, 2: other), 5 = targetIndex\r\n        bool Res" +
                    "toreSynicPackets(ref byte ch, ref string id, ref ArraySegment<byte> payload){\r\n " +
                    "           //Set target id\r\n            if(payload[4] == 0){\r\n                if" +
                    "(p2pInfo.Instance.IsHost(id) && p2pInfo.Instance.IsReconnecter){\r\n              " +
                    "      id = p2pInfo.Instance.LocalUserId.ToString();\r\n                }else{\r\n   " +
                    "                 return false;\r\n                }\r\n            }else if(payload[" +
                    "4] == 2){\r\n                if(p2pInfo.Instance.IsHost(id) && p2pInfo.Instance.Is" +
                    "Reconnecter){\r\n                    id = p2pInfo.Instance.AllUserIds[payload[5]]." +
                    "ToString();\r\n                }else{\r\n                    return false;\r\n        " +
                    "        }\r\n            }\r\n\r\n\r\n            if(!synicBuffer.ContainsKey(id)){\r\n   " +
                    "             synicPacketInfo.Add(id, new SynicPacketInfomation(){  basis = new (" +
                    "){ chunk = payload[1]}, \r\n                                                      " +
                    "                      phase = payload[2], \r\n                                    " +
                    "                                        syncSinglePhase = payload[3] == 1 ? true" +
                    " : false });\r\n                //Prep enough byte[]\r\n                synicBuffer." +
                    "Add(id, new byte[payload[1] * 1160]);\r\n            }\r\n            int packetInde" +
                    "x = payload[0];\r\n            int offset = packetIndex * 1160;\r\n\r\n    #if SYNICSU" +
                    "GAR_LOG\r\n            Debug.Log($\"RestoreSynicPackets: PacketInfo:: index {payloa" +
                    "d[0]} / chunk {payload[1]} / phase {payload[2]} / syncSinglePhase {payload[3]}\")" +
                    ";\r\n    #endif\r\n            //Remove header\r\n            Span<byte> packetPayload" +
                    " = payload.Slice(6);\r\n            synicPacketInfo[id].basis.currentSize += packe" +
                    "tPayload.Length;\r\n            //Copy Byte from what come in\r\n            Buffer." +
                    "BlockCopy(packetPayload.ToArray(), 0, synicBuffer[id], offset, packetPayload.Len" +
                    "gth);\r\n            //Comming all?\r\n            return synicPacketInfo[id].basis." +
                    "currentSize + 1160 > synicBuffer[id].Length ? true : false;\r\n        }\r\n\r\n      " +
                    "  /// <summary>\r\n        /// Call from ConvertFormPacket.\r\n        /// </summary" +
                    ">\r\n        void SyncedSynic(string overwriterUserId){\r\n            //Deserialize" +
                    " packet\r\n            using var decompressor = new BrotliDecompressor();\r\n       " +
                    "     Span<byte> transmittedPaylaod = new Span<byte>(synicBuffer[overwriterUserId" +
                    "]);\r\n\r\n            var decompressedBuffer = decompressor.Decompress(transmittedP" +
                    "aylaod.Slice(0, synicPacketInfo[overwriterUserId].basis.currentSize));\r\n        " +
                    "    SynicContainer container = MemoryPackSerializer.Deserialize<SynicContainer>(" +
                    "decompressedBuffer);\r\n#if SYNICSUGAR_LOG\r\n            Debug.Log($\"SyncedSynic: D" +
                    "eserialize is Success for {overwriterUserId}\");\r\n    #endif\r\n\r\n            //Pac" +
                    "ket data\r\n            int phase = synicPacketInfo[overwriterUserId].phase;\r\n    " +
                    "        bool syncSinglePhase = synicPacketInfo[overwriterUserId].syncSinglePhase" +
                    ";\r\n\r\n            switch(phase){");
            
            #line 475 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedInvoker));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "}\r\n        ");
            
            #line 480 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedItems));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ConnecthubTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
