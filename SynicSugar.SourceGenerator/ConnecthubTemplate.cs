// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SynicSugarGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ConnecthubTemplate : ConnecthubTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\n#pragma warning disable CS0164 // This labe" +
                    "l has not been referenced\r\n#pragma warning disable CS0436 // Type conflicts with" +
                    " the imported type\r\n\r\nusing UnityEngine;\r\nusing MemoryPack;\r\nusing MemoryPack.Co" +
                    "mpression;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;" +
                    "\r\nusing System.Threading;\r\nusing Cysharp.Threading.Tasks;\r\nnamespace SynicSugar." +
                    "P2P {\r\n    internal sealed class ConnectHub {\r\n        //Singleton\r\n        priv" +
                    "ate static Lazy<ConnectHub> instance = new Lazy<ConnectHub>();\r\n        public s" +
                    "tatic ConnectHub Instance => instance.Value;\r\n\r\n        private ConnectHub(){\r\n " +
                    "       }\r\n        //Start\r\n        /// <summary>\r\n        /// Start the packet r" +
                    "eceiver. Call after creating the Network Instance required for reception.\r\n     " +
                    "   /// </summary>\r\n        // Default Relay Setting is AllowRelay. To change thi" +
                    "s, get NatType.\r\n        public void StartPacketReceiver(){\r\n            if(p2pC" +
                    "onnectorForOtherAssembly.Instance.p2pToken == null || p2pConnectorForOtherAssemb" +
                    "ly.Instance.p2pToken.IsCancellationRequested){\r\n                p2pConnectorForO" +
                    "therAssembly.Instance.p2pToken = new CancellationTokenSource();\r\n               " +
                    " RecivePacket().Forget();\r\n            }\r\n        }\r\n        //Pause receiver\r\n " +
                    "       /// <summary>\r\n        /// Pause getting a packet from the buffer. To re-" +
                    "start, call StartPacketReceiver().<br />\r\n        /// *Packet receiving to the b" +
                    "uffer is continue. If the packet is over the buffer, subsequent packets are disc" +
                    "arded.\r\n        /// </summary>\r\n        public void PausetPacketReceiver(){\r\n   " +
                    "         if(p2pConnectorForOtherAssembly.Instance.p2pToken != null && !p2pConnec" +
                    "torForOtherAssembly.Instance.p2pToken.IsCancellationRequested){\r\n               " +
                    " p2pConnectorForOtherAssembly.Instance.p2pToken.Cancel();\r\n            }\r\n      " +
                    "  }\r\n\r\n        //Pause Reciving buffer\r\n        /// <summary>\r\n        /// Pause" +
                    " receiving a packet to the receive buffer. To re-start, call RestartConnections(" +
                    "). <br />\r\n        /// After call this, packets will have been discarded until c" +
                    "onnection will re-open.<br />\r\n        /// WARNING: This doesn\'t work as intende" +
                    "d now. Can\'t stop receiving packets to buffer, so SynicSugar discard those packe" +
                    "ts before re-start.\r\n        /// </summary>\r\n        /// <param name=\"isForced\">" +
                    "If True, force to stop and clear current packet queue. <br />\r\n        /// If fa" +
                    "lse, process current queue, then stop it.</param>\r\n        public async UniTask " +
                    "PauseConnections(bool isForced = false, CancellationTokenSource cancelToken = de" +
                    "fault(CancellationTokenSource)){\r\n            await p2pConnectorForOtherAssembly" +
                    ".Instance.PauseConnections(isForced, cancelToken);\r\n        }\r\n        /// <summ" +
                    "ary>\r\n        /// Prepare to receive packets in advance. If user sent a packet, " +
                    "it can also open connection to get packets without this.\r\n        /// </summary>" +
                    "\r\n        public void RestartConnections(){\r\n            p2pConnectorForOtherAss" +
                    "embly.Instance.RestartConnections();\r\n            RecivePacket().Forget();\r\n    " +
                    "    }\r\n        \r\n        /// <summary>\r\n        /// Stop receiver, close all con" +
                    "nections and remove the notify events.\r\n        /// Then, the user leave the lob" +
                    "by.<br />\r\n        /// To exit from lobby alone during a game(= not whole, only " +
                    "one battle). Usually use CloseSession().\r\n        /// </summary>\r\n        public" +
                    " async UniTask<bool> ExitSession(CancellationTokenSource cancelToken = default(C" +
                    "ancellationTokenSource)){\r\n            bool isSuccess = await p2pConnectorForOth" +
                    "erAssembly.Instance.ExitSession(cancelToken.Token);\r\n            return isSucces" +
                    "s;\r\n        }\r\n        /// <summary>\r\n        /// Stop receiver, close all conne" +
                    "ctions and remove the notify events.<br />\r\n        /// Then, Host closees and G" +
                    "uest leaves the lobby.\r\n        /// </summary>\r\n        public async UniTask<boo" +
                    "l> CloseSession(CancellationTokenSource cancelToken = default(CancellationTokenS" +
                    "ource)){\r\n            bool isSuccess = await p2pConnectorForOtherAssembly.Instan" +
                    "ce.CloseSession(cancelToken.Token);\r\n            return isSuccess;\r\n        }\r\n " +
                    "       async UniTask RecivePacket(){\r\n            while(!p2pConnectorForOtherAss" +
                    "embly.Instance.p2pToken.IsCancellationRequested){\r\n                SugarPacket r" +
                    "ecivePacket = p2pConnectorForOtherAssembly.Instance.GetPacketFromBuffer();\r\n\r\n  " +
                    "              if(recivePacket != null){\r\n                    ConnectHub.Instance" +
                    ".ConvertFormPacket(recivePacket);\r\n                }\r\n                await UniT" +
                    "ask.Delay(p2pConnectorForOtherAssembly.Instance.receiverInterval);\r\n\r\n          " +
                    "      if(p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancellationRequested)" +
                    "{\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n  " +
                    "      //(for elements)\r\n        public enum CHANNELLIST{\r\n            ");
            
            #line 106 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncList));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        //Ref(for class)");
            
            #line 108 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Reference));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //Register(for class)");
            
            #line 110 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Register));
            
            #line default
            #line hidden
            this.Write(@"
        
        /// <summary>
        /// Get the NetworkPlayer instance registered with ConnectHub.
        /// </summary>
        /// <param name=""id"">UserID to get</param>
        /// <returns>T's instance</returns>
        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {");
            
            #line 117 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PlayeInstance));
            
            #line default
            #line hidden
            this.Write(@"
            return default(T);
        }
        
        /// <summary>
        /// Get the NetworkCommons instance registered with ConnectHub.
        /// </summary>
        /// <returns>T's instance</returns>
        public T GetInstance<T>() where T : IGetCommons {");
            
            #line 125 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommonsInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n\r\n        //SendPacket(for elements)" +
                    "\r\n        public void ConvertFormPacket(SugarPacket packet){\r\n            switch" +
                    "((CHANNELLIST)packet.ch){");
            
            #line 131 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PacketConvert));
            
            #line default
            #line hidden
            this.Write(@"
            }
        }

        //For Synic
        Dictionary<string, List<ArraySegment<byte>>> buffer = new Dictionary<string, List<ArraySegment<byte>>>();
        Dictionary<string, LargePacketInfomation> packetInfo = new Dictionary<string, LargePacketInfomation>();
        /// <summary>
        /// Sync all Synic variables. This is very heavy because it handles multiple data and repeats compression and serialization.
        /// </summary>
        /// <param name=""targetId"">Target to be synced by this local user.</param>
        /// <param name=""syncedHierarchy"">Hierarchy to be synced. If syncSingleHierarchy is false, sync all variables in the hierarchy up to this point.</param>
        /// <param name=""syncSingleHierarchy"">If true, send only variables in syncedHierarchy.</param>
        public void SyncSynic(UserId targetId, byte syncedHierarchy = 9, bool syncSingleHierarchy = false){
            SynicContainer synicContainer = new SynicContainer();
            switch(syncedHierarchy){");
            
            #line 146 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncSynic));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "    using var compressor  = new BrotliCompressor();\r\n            MemoryPackSeria" +
                    "lizer.Serialize(compressor , synicContainer);\r\n\r\n            EOSp2p.SendLargePac" +
                    "ket((byte)CHANNELLIST.Synic, compressor.ToArray(), targetId, syncedHierarchy, sy" +
                    "ncSingleHierarchy);\r\n        }\r\n        \r\n        byte[] RestorePackets(SugarPac" +
                    "ket packet){\r\n            if(!buffer.ContainsKey(packet.UserID)){\r\n             " +
                    "   buffer.Add(packet.UserID, new List<ArraySegment<byte>>());\r\n                p" +
                    "acketInfo.Add(packet.UserID, new LargePacketInfomation());\r\n            }\r\n     " +
                    "       int packetIndex = packet.payload[0];\r\n            bool isFirstPacket = pa" +
                    "cketIndex == 0;\r\n            if(isFirstPacket){\r\n                packetInfo[pack" +
                    "et.UserID].chunk = packet.payload[1];\r\n                packetInfo[packet.UserID]" +
                    ".hierarchy = packet.payload[2];\r\n                packetInfo[packet.UserID].syncS" +
                    "pecificHierarchy = packet.payload[3] == 1 ? true : false;\r\n            }\r\n\r\n    " +
                    "        RemoveLargePacketHeader(ref packet.payload, isFirstPacket);\r\n\r\n         " +
                    "   //Hold packet in order\r\n            if(packetIndex == buffer[packet.UserID].C" +
                    "ount - 1){ //same with length \r\n                buffer[packet.UserID].Add(packet" +
                    ".payload);\r\n            }else if(packetIndex >= buffer[packet.UserID].Count){\r\n " +
                    "               for(int length = buffer[packet.UserID].Count; length <= packetInd" +
                    "ex; length++){ //short\r\n                    buffer[packet.UserID].Add(new ArrayS" +
                    "egment<byte>());\r\n                }\r\n            }else{ //enough\r\n              " +
                    "  buffer[packet.UserID][packetIndex] = packet.payload;\r\n            }\r\n\r\n       " +
                    "     //Restore packet\r\n            if(buffer[packet.UserID].Count == packetInfo[" +
                    "packet.UserID].chunk){\r\n                int length = buffer[packet.UserID].Sum(s" +
                    "egment => segment.Count);\r\n                byte[] result = new byte[length];\r\n  " +
                    "              int offset = 0;\r\n\r\n                foreach (var i in buffer[packet" +
                    ".UserID]){\r\n                    i.Array.CopyTo(result, offset);\r\n               " +
                    "     offset += i.Count;\r\n                }\r\n                return result;\r\n    " +
                    "        }\r\n            return null;\r\n            \r\n            void RemoveLargeP" +
                    "acketHeader(ref ArraySegment<byte> payload, bool isFirst){\r\n                if(i" +
                    "sFirst){\r\n                    payload = payload.Slice(4);\r\n                }else" +
                    "{\r\n                    payload = payload.Slice(1);\r\n                }\r\n         " +
                    "   }\r\n        }\r\n        /// <summary>\r\n        /// Call from ConvertFormPacket." +
                    "\r\n        /// </summary>\r\n        void SyncedSynic(UserId targetId, byte[] resto" +
                    "redPacket){\r\n            //Deserialize packet\r\n            using var decompresso" +
                    "r = new BrotliDecompressor();\r\n            var decompressedBuffer = decompressor" +
                    ".Decompress(restoredPacket);\r\n            SynicContainer container = MemoryPackS" +
                    "erializer.Deserialize<SynicContainer>(decompressedBuffer);\r\n\r\n            //Pack" +
                    "et data\r\n            int hierarchy = packetInfo[targetId.ToString()].hierarchy;\r" +
                    "\n            bool syncSingleHierarchy = packetInfo[targetId.ToString()].syncSpec" +
                    "ificHierarchy;\r\n\r\n            switch(hierarchy){");
            
            #line 217 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedInvoker));
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                goto case 9;\r\n            }\r\n        " +
                    "}\r\n        ");
            
            #line 222 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncedItems));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ConnecthubTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
