// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SynicSugarGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ConnecthubTemplate : ConnecthubTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY SynicSugarGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\nusing MemoryPack;\r\nusing System;\r\nusing Sys" +
                    "tem.Collections.Generic;\r\nusing System.Threading;\r\nusing Cysharp.Threading.Tasks" +
                    ";\r\nnamespace SynicSugar.P2P {\r\n    internal sealed class ConnectHub {\r\n        /" +
                    "/Singleton\r\n        private static Lazy<ConnectHub> instance = new Lazy<ConnectH" +
                    "ub>();\r\n        public static ConnectHub Instance => instance.Value;\r\n\r\n        " +
                    "public ConnectHub(){\r\n        }\r\n        //Start\r\n        /// <summary>\r\n       " +
                    " /// Start the packet receiver. Call after creating the Network Instance require" +
                    "d for reception.\r\n        /// </summary>\r\n        // Default Relay Setting is Al" +
                    "lowRelay. To change this, get NatType.\r\n        public void StartPacketReceiver(" +
                    "){\r\n            if(p2pConnectorForOtherAssembly.Instance.p2pToken == null || p2p" +
                    "ConnectorForOtherAssembly.Instance.p2pToken.IsCancellationRequested){\r\n         " +
                    "       p2pConnectorForOtherAssembly.Instance.p2pToken = new CancellationTokenSou" +
                    "rce();\r\n                RecivePacket().Forget();\r\n            }\r\n        }\r\n    " +
                    "    //Pause receiver\r\n        /// <summary>\r\n        /// Pause getting a packet " +
                    "from the buffer. To re-start, call StartPacketReceiver().<br />\r\n        /// *Pa" +
                    "cket receiving to the buffer is continue. If the packet is over the buffer, subs" +
                    "equent packets are discarded.\r\n        /// </summary>\r\n        public void Pause" +
                    "tPacketReceiver(){\r\n            if(p2pConnectorForOtherAssembly.Instance.p2pToke" +
                    "n != null && !p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancellationReque" +
                    "sted){\r\n                p2pConnectorForOtherAssembly.Instance.p2pToken.Cancel();" +
                    "\r\n            }\r\n        }\r\n\r\n        //Pause Reciving buffer\r\n        /// <summ" +
                    "ary>\r\n        /// Pause receiving a packet to the receive buffer. To re-start, c" +
                    "all RestartConnections(). <br />\r\n        /// After call this, packets will have" +
                    " been discarded until connection will re-open.<br />\r\n        /// WARNING: This " +
                    "doesn\'t work as intended now. Can\'t stop receiving packets to buffer, so SynicSu" +
                    "gar discard those packets before re-start.\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"isForced\">If True, force to stop and clear current packet queue. <b" +
                    "r />\r\n        /// If false, process current queue, then stop it.</param>\r\n      " +
                    "  public async UniTask PauseConnections(bool isForced = false, CancellationToken" +
                    "Source cancelToken = default(CancellationTokenSource)){\r\n            await p2pCo" +
                    "nnectorForOtherAssembly.Instance.PauseConnections(isForced, cancelToken);\r\n     " +
                    "   }\r\n        /// <summary>\r\n        /// Prepare to receive packets in advance. " +
                    "If user sent a packet, it can also open connection to get packets without this.\r" +
                    "\n        /// </summary>\r\n        public void RestartConnections(){\r\n            " +
                    "p2pConnectorForOtherAssembly.Instance.RestartConnections();\r\n            ReciveP" +
                    "acket().Forget();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// Stop " +
                    "receiver, close all connections and remove the notify events.\r\n        /// Then," +
                    " the user leave the lobby.<br />\r\n        /// To exit from lobby alone during a " +
                    "game(= not whole, only one battle). Usually use CloseSession().\r\n        /// </s" +
                    "ummary>\r\n        public async UniTask<bool> ExitSession(CancellationTokenSource " +
                    "cancelToken = default(CancellationTokenSource)){\r\n            bool isSuccess = a" +
                    "wait p2pConnectorForOtherAssembly.Instance.ExitSession(cancelToken.Token);\r\n    " +
                    "        return isSuccess;\r\n        }\r\n        /// <summary>\r\n        /// Stop re" +
                    "ceiver, close all connections and remove the notify events.<br />\r\n        /// T" +
                    "hen, Host closees and Guest leaves the lobby.\r\n        /// </summary>\r\n        p" +
                    "ublic async UniTask<bool> CloseSession(CancellationTokenSource cancelToken = def" +
                    "ault(CancellationTokenSource)){\r\n            bool isSuccess = await p2pConnector" +
                    "ForOtherAssembly.Instance.CloseSession(cancelToken.Token);\r\n            return i" +
                    "sSuccess;\r\n        }\r\n        async UniTask RecivePacket(){\r\n            while(!" +
                    "p2pConnectorForOtherAssembly.Instance.p2pToken.IsCancellationRequested){\r\n      " +
                    "          SugarPacket recivePacket = p2pConnectorForOtherAssembly.Instance.GetPa" +
                    "cketFromBuffer();\r\n\r\n                if(recivePacket != null){\r\n                " +
                    "    ConnectHub.Instance.ConvertFormPacket(recivePacket);\r\n                }\r\n   " +
                    "             await UniTask.Delay(p2pConnectorForOtherAssembly.Instance.receiverI" +
                    "nterval);\r\n\r\n                if(p2pConnectorForOtherAssembly.Instance.p2pToken.I" +
                    "sCancellationRequested){\r\n                    break;\r\n                }\r\n       " +
                    "     }\r\n        }\r\n\r\n        //(for elements)\r\n        public enum CHANNELLIST{\r" +
                    "\n            ");
            
            #line 100 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SyncList));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        //Ref(for class)");
            
            #line 102 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Reference));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //Register(for class)");
            
            #line 104 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Register));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        //GetInstance(with class instance) Good performance in IL2cpp?");
            
            #line 106 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInstance));
            
            #line default
            #line hidden
            this.Write("\r\n        //GetInstance(with <type>) Bad performance in IL2cpp?\r\n        // For P" +
                    "layer\r\n        public T GetUserInstance<T>(UserId id) where T : IGetPlayer {");
            
            #line 109 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PlayeInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n        // For Commons\r\n        publ" +
                    "ic T GetUserInstance<T>() where T : IGetCommons {");
            
            #line 113 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommonsInstance));
            
            #line default
            #line hidden
            this.Write("\r\n            return default(T);\r\n        }\r\n\r\n        //GetInstanceAsObject(for " +
                    "class)\r\n        [Obsolete]\r\n        public object GetUserInstanceAsObject(UserId" +
                    " id, Type type){");
            
            #line 119 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInstanceAsObject));
            
            #line default
            #line hidden
            this.Write("\r\n            return null;\r\n        }\r\n\r\n        //SendPacket(for elements)\r\n    " +
                    "    public void ConvertFormPacket(SugarPacket packet){\r\n            switch((CHAN" +
                    "NELLIST)packet.ch){");
            
            #line 125 "D:\SynicSugarGitTest\SynicSugar\SynicSugar.SourceGenerator\ConnecthubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PacketConvert));
            
            #line default
            #line hidden
            this.Write(@"
            }
        }


        //--Obsolete---
        /// <summary>
        /// Stop receiver, close all connects and cancel all events to receive. Then, exit the current lobby.<br />
        /// Fix to LeaveSession and CloseSession for readability.
        /// </summary>
        [Obsolete(""This is old. Can use CloseSession()"")]
        public void EndConnection(){
            CancellationTokenSource token = new CancellationTokenSource();
            p2pConnectorForOtherAssembly.Instance.CloseSession(token.Token);
        }
        //----
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ConnecthubTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
